openapi: 3.0.3
info:
  title: 'weLore API'
  description: 'The WeLore API allows creators, brands, and communities to integrate a gamified loyalty system without writing code. It handles users, missions, digital rewards, collectibles, custom currencies, and seasonal narratives â€” all designed to turn every interaction into part of your brand story.'
  version: 1.0.0
servers:
  -
    url: 'https://api-weafinity.madfenix.com'
tags:
  -
    name: 'Blockchain operations'
    description: "\nAPIs for managing blockchain transfers to Hedera"
  -
    name: Endpoints
    description: ''
  -
    name: 'Event management'
    description: "\nAPIs for managing events"
  -
    name: 'Events meta management'
    description: "\nAPIs for managing events meta"
  -
    name: 'Free Coin Coupon management'
    description: "\nAPIs for managing free coin coupons"
  -
    name: 'Habit management'
    description: "\nAPIs for managing habits"
  -
    name: 'Item Coupons management'
    description: "\nAPIs for managing item coupons"
  -
    name: 'Item management'
    description: "\nAPIs for managing Items"
  -
    name: 'Phoenix Diary management'
    description: "\nAPIs for managing phoenix diary"
  -
    name: 'Poll management'
    description: "\nAPIs for managing polls"
  -
    name: 'Premium Coin Coupons management'
    description: "\nAPIs for managing premium coin coupons"
  -
    name: 'Product Order management'
    description: "\nAPIs for managing product orders"
  -
    name: 'Product management'
    description: "\nAPIs for managing products"
  -
    name: 'Profile management'
    description: "\nAPIs for managing profiles"
  -
    name: 'Ranking management'
    description: "\nAPIs for managing rankings"
  -
    name: 'Rankings season management'
    description: "\nAPIs for managing rankings seasons"
  -
    name: 'Season Rewards management'
    description: "\nAPIs for managing season rewards"
  -
    name: 'Season management'
    description: "\nAPIs for managing seasons"
  -
    name: 'Steam management'
    description: "\nAPIs for managing steam conections"
  -
    name: 'Subitems management'
    description: "\nAPIs for managing SubItem (specific instances of Items)"
  -
    name: 'Twitch management'
    description: "\nAPIs for managing teitch conections"
  -
    name: 'User management'
    description: "\nAPIs for managing users"
  -
    name: 'User management admin'
    description: "\nAPIs for managing users by admins"
components:
  securitySchemes:
    default:
      type: http
      scheme: bearer
      description: 'You can retrieve your token by visiting your dashboard and clicking <b>Generate API token</b>.'
security:
  -
    default: []
paths:
  '/api/{account}/blockchain/transferPlumasToHedera':
    post:
      summary: 'Transfer Plumas to Hedera'
      operationId: transferPlumasToHedera
      description: "Transfer a specified amount of Plumas (feathers) from the user's account to Hedera blockchain."
      parameters: []
      responses: {  }
      tags:
        - 'Blockchain operations'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id_hedera:
                  type: string
                  description: 'The Hedera account ID to transfer to.'
                  example: '"0.0.123456"'
                  nullable: false
                plumas:
                  type: integer
                  description: 'The amount of plumas to transfer (minimum 1).'
                  example: 10
                  nullable: false
              required:
                - id_hedera
                - plumas
      security: []
    parameters:
      -
        in: path
        name: account
        description: ''
        example: consequatur
        required: true
        schema:
          type: string
  '/api/{account}/blockchain/transferOroToHedera':
    post:
      summary: 'Transfer Oro to Hedera'
      operationId: transferOroToHedera
      description: "Transfer a specified amount of Oro (gold) from the user's account to Hedera blockchain."
      parameters: []
      responses: {  }
      tags:
        - 'Blockchain operations'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id_hedera:
                  type: string
                  description: 'The Hedera account ID to transfer to.'
                  example: '"0.0.123456"'
                  nullable: false
                oro:
                  type: integer
                  description: 'The amount of oro to transfer (minimum 1).'
                  example: 5
                  nullable: false
              required:
                - id_hedera
                - oro
      security: []
    parameters:
      -
        in: path
        name: account
        description: ''
        example: consequatur
        required: true
        schema:
          type: string
  '/api/{account}/blockchain/transferNftToHedera':
    post:
      summary: 'Transfer NFT to Hedera'
      operationId: transferNFTToHedera
      description: "Transfer a specific NFT from the user's account to Hedera blockchain."
      parameters: []
      responses: {  }
      tags:
        - 'Blockchain operations'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id_hedera:
                  type: string
                  description: 'The Hedera account ID to transfer to.'
                  example: '"0.0.123456"'
                  nullable: false
                nft_identification_id:
                  type: integer
                  description: 'The ID of the NFT identification to transfer.'
                  example: 42
                  nullable: false
              required:
                - id_hedera
                - nft_identification_id
      security: []
    parameters:
      -
        in: path
        name: account
        description: ''
        example: consequatur
        required: true
        schema:
          type: string
  '/api/{account}/user':
    get:
      summary: ''
      operationId: getApiAccountUser
      description: ''
      parameters: []
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - Endpoints
      security: []
    parameters:
      -
        in: path
        name: account
        description: ''
        example: consequatur
        required: true
        schema:
          type: string
  '/api/{account}/user-is-manager':
    get:
      summary: 'Display the specified resource.'
      operationId: displayTheSpecifiedResource
      description: ''
      parameters: []
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - Endpoints
      security: []
    parameters:
      -
        in: path
        name: account
        description: ''
        example: consequatur
        required: true
        schema:
          type: string
  '/api/{account}/user-is-employee':
    get:
      summary: 'Display the specified resource.'
      operationId: displayTheSpecifiedResource
      description: ''
      parameters: []
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - Endpoints
      security: []
    parameters:
      -
        in: path
        name: account
        description: ''
        example: consequatur
        required: true
        schema:
          type: string
  '/api/{account}/fighter/getFighterUser':
    get:
      summary: ''
      operationId: getApiAccountFighterGetFighterUser
      description: ''
      parameters: []
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - Endpoints
      security: []
    parameters:
      -
        in: path
        name: account
        description: ''
        example: consequatur
        required: true
        schema:
          type: string
  '/api/{account}/fighter/setFighterUserDecks':
    post:
      summary: ''
      operationId: postApiAccountFighterSetFighterUserDecks
      description: ''
      parameters: []
      responses: {  }
      tags:
        - Endpoints
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                deck_number:
                  type: integer
                  description: ''
                  example: 17
                  nullable: false
                deck:
                  type: string
                  description: ''
                  example: consequatur
                  nullable: false
              required:
                - deck_number
                - deck
      security: []
    parameters:
      -
        in: path
        name: account
        description: ''
        example: consequatur
        required: true
        schema:
          type: string
  '/api/{account}/fighter/getFighterFriends':
    get:
      summary: ''
      operationId: getApiAccountFighterGetFighterFriends
      description: ''
      parameters: []
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - Endpoints
      security: []
    parameters:
      -
        in: path
        name: account
        description: ''
        example: consequatur
        required: true
        schema:
          type: string
  '/api/{account}/fighter/findFighterFriend':
    post:
      summary: ''
      operationId: postApiAccountFighterFindFighterFriend
      description: ''
      parameters: []
      responses: {  }
      tags:
        - Endpoints
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: ''
                  example: consequatur
                  nullable: false
              required:
                - name
      security: []
    parameters:
      -
        in: path
        name: account
        description: ''
        example: consequatur
        required: true
        schema:
          type: string
  '/api/{account}/fighter/requestFighterFriend':
    post:
      summary: ''
      operationId: postApiAccountFighterRequestFighterFriend
      description: ''
      parameters: []
      responses: {  }
      tags:
        - Endpoints
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                user_id:
                  type: integer
                  description: ''
                  example: 17
                  nullable: false
              required:
                - user_id
      security: []
    parameters:
      -
        in: path
        name: account
        description: ''
        example: consequatur
        required: true
        schema:
          type: string
  '/api/{account}/fighter/getFighterFriendRequests':
    get:
      summary: ''
      operationId: getApiAccountFighterGetFighterFriendRequests
      description: ''
      parameters: []
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - Endpoints
      security: []
    parameters:
      -
        in: path
        name: account
        description: ''
        example: consequatur
        required: true
        schema:
          type: string
  '/api/{account}/fighter/approveFighterFriendRequest':
    post:
      summary: ''
      operationId: postApiAccountFighterApproveFighterFriendRequest
      description: ''
      parameters: []
      responses: {  }
      tags:
        - Endpoints
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                user_id:
                  type: integer
                  description: ''
                  example: 17
                  nullable: false
              required:
                - user_id
      security: []
    parameters:
      -
        in: path
        name: account
        description: ''
        example: consequatur
        required: true
        schema:
          type: string
  '/api/{account}/fighter/cancelFighterFriendRequest':
    post:
      summary: ''
      operationId: postApiAccountFighterCancelFighterFriendRequest
      description: ''
      parameters: []
      responses: {  }
      tags:
        - Endpoints
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                user_id:
                  type: integer
                  description: ''
                  example: 17
                  nullable: false
              required:
                - user_id
      security: []
    parameters:
      -
        in: path
        name: account
        description: ''
        example: consequatur
        required: true
        schema:
          type: string
  '/api/{account}/fighter/getRanking':
    get:
      summary: ''
      operationId: getApiAccountFighterGetRanking
      description: ''
      parameters: []
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - Endpoints
      security: []
    parameters:
      -
        in: path
        name: account
        description: ''
        example: consequatur
        required: true
        schema:
          type: string
  '/api/{account}/fighter/findFighterUserBattle':
    post:
      summary: ''
      operationId: postApiAccountFighterFindFighterUserBattle
      description: ''
      parameters: []
      responses: {  }
      tags:
        - Endpoints
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                bot:
                  type: boolean
                  description: ''
                  example: false
                  nullable: false
              required:
                - bot
      security: []
    parameters:
      -
        in: path
        name: account
        description: ''
        example: consequatur
        required: true
        schema:
          type: string
  '/api/{account}/fighter/saveFighterUserBattleTurn':
    post:
      summary: ''
      operationId: postApiAccountFighterSaveFighterUserBattleTurn
      description: ''
      parameters: []
      responses: {  }
      tags:
        - Endpoints
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                card_left:
                  type: integer
                  description: ''
                  example: 17
                  nullable: false
                card_center:
                  type: integer
                  description: ''
                  example: 17
                  nullable: false
                card_right:
                  type: integer
                  description: ''
                  example: 17
                  nullable: false
      security: []
    parameters:
      -
        in: path
        name: account
        description: ''
        example: consequatur
        required: true
        schema:
          type: string
  '/api/{account}/fighter/resolveFighterUsersBattleTurn':
    post:
      summary: ''
      operationId: postApiAccountFighterResolveFighterUsersBattleTurn
      description: ''
      parameters: []
      responses: {  }
      tags:
        - Endpoints
      security: []
    parameters:
      -
        in: path
        name: account
        description: ''
        example: consequatur
        required: true
        schema:
          type: string
  '/api/{account}/fighter/getFighterUserBattle':
    get:
      summary: ''
      operationId: getApiAccountFighterGetFighterUserBattle
      description: ''
      parameters: []
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - Endpoints
      security: []
    parameters:
      -
        in: path
        name: account
        description: ''
        example: consequatur
        required: true
        schema:
          type: string
  '/api/{account}/event/list':
    get:
      summary: 'Display a listing of current events for the authenticated user.'
      operationId: displayAListingOfCurrentEventsForTheAuthenticatedUser
      description: 'Get a list of all active events for the current user.'
      parameters: []
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Event management'
      security: []
    parameters:
      -
        in: path
        name: account
        description: ''
        example: consequatur
        required: true
        schema:
          type: string
  '/api/{account}/event/readEvent':
    post:
      summary: 'Mark an event as read.'
      operationId: markAnEventAsRead
      description: 'Update the read_at timestamp for a specific event.'
      parameters: []
      responses: {  }
      tags:
        - 'Event management'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                event_id:
                  type: integer
                  description: 'The ID of the event to mark as read.'
                  example: 1
                  nullable: false
              required:
                - event_id
      security: []
    parameters:
      -
        in: path
        name: account
        description: ''
        example: consequatur
        required: true
        schema:
          type: string
  '/api/{account}/manager/event-metas':
    get:
      summary: 'Display a listing of event metas.'
      operationId: displayAListingOfEventMetas
      description: 'Get a paginated list of all event metas.'
      parameters: []
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Events meta management'
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                page:
                  type: integer
                  description: 'The page number for pagination.'
                  example: 0
                  nullable: false
                limit:
                  type: integer
                  description: 'The number of items per page (1-100).'
                  example: 10
                  nullable: false
                filter:
                  type: string
                  description: 'Filter event metas by description.'
                  example: '"Important"'
                  nullable: false
                sorting:
                  type: string
                  description: 'Sort event metas by column and direction (column:direction).'
                  example: '"created_at:desc"'
                  nullable: false
                parent_id:
                  type: integer
                  description: 'Filter event metas by parent ID.'
                  example: 1
                  nullable: false
      security: []
    post:
      summary: 'Store a newly created event meta.'
      operationId: storeANewlyCreatedEventMeta
      description: 'Create a new event meta with the provided data.'
      parameters: []
      responses: {  }
      tags:
        - 'Events meta management'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                creator_id:
                  type: integer
                  description: 'The ID of the user creating the event meta.'
                  example: 1
                  nullable: false
                description:
                  type: string
                  description: 'The short description of the event meta (4-255 chars).'
                  example: '"New event meta"'
                  nullable: false
                details:
                  type: string
                  description: 'The detailed description of the event meta (8-2000 chars).'
                  example: '"This is a detailed description of the event meta with all relevant information."'
                  nullable: false
                product_gift_id:
                  type: integer
                  description: 'The ID of the product gift.'
                  example: 10
                  nullable: false
                start_at:
                  type: datetime
                  description: 'The start date and time of the event meta.'
                  example: '"2023-01-01 00:00:00"'
                  nullable: false
                end_at:
                  type: datetime
                  description: 'The end date and time of the event meta.'
                  example: '"2023-01-31 23:59:59"'
                  nullable: false
              required:
                - creator_id
                - description
                - details
                - start_at
                - end_at
      security: []
    delete:
      summary: 'Remove the specified event meta.'
      operationId: removeTheSpecifiedEventMeta
      description: 'Delete an event meta by ID.'
      parameters: []
      responses: {  }
      tags:
        - 'Events meta management'
      security: []
    parameters:
      -
        in: path
        name: account
        description: ''
        example: consequatur
        required: true
        schema:
          type: string
  '/api/{account}/manager/event-metas/{id}':
    get:
      summary: 'Display the specified event meta.'
      operationId: displayTheSpecifiedEventMeta
      description: 'Get details of a specific event meta by ID.'
      parameters: []
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Events meta management'
      security: []
    put:
      summary: 'Update the specified event meta.'
      operationId: updateTheSpecifiedEventMeta
      description: 'Update an existing event meta with the provided data.'
      parameters: []
      responses: {  }
      tags:
        - 'Events meta management'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                creator_id:
                  type: integer
                  description: 'The ID of the user creating the event meta.'
                  example: 1
                  nullable: false
                description:
                  type: string
                  description: 'The short description of the event meta (4-255 chars).'
                  example: '"Updated event meta"'
                  nullable: false
                details:
                  type: string
                  description: 'The detailed description of the event meta (8-2000 chars).'
                  example: '"This is an updated detailed description of the event meta with all relevant information."'
                  nullable: false
                product_gift_id:
                  type: integer
                  description: 'The ID of the product gift.'
                  example: 10
                  nullable: false
                start_at:
                  type: datetime
                  description: 'The start date and time of the event meta.'
                  example: '"2023-01-01 00:00:00"'
                  nullable: false
                end_at:
                  type: datetime
                  description: 'The end date and time of the event meta.'
                  example: '"2023-01-31 23:59:59"'
                  nullable: false
              required:
                - creator_id
                - description
                - details
                - start_at
                - end_at
      security: []
    delete:
      summary: 'Remove the specified event meta.'
      operationId: removeTheSpecifiedEventMeta
      description: 'Delete an event meta by ID.'
      parameters: []
      responses: {  }
      tags:
        - 'Events meta management'
      security: []
    parameters:
      -
        in: path
        name: account
        description: ''
        example: consequatur
        required: true
        schema:
          type: string
      -
        in: path
        name: id
        description: 'The ID of the event meta.'
        example: consequatur
        required: true
        schema:
          type: string
  '/api/{account}/manager/event-metas-download':
    get:
      summary: 'Download event metas as CSV or JSON.'
      operationId: downloadEventMetasAsCSVOrJSON
      description: 'Export the event meta data in CSV or JSON format.'
      parameters: []
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Events meta management'
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                type:
                  type: string
                  description: 'The file format to download (csv or json).'
                  example: '"csv"'
                  nullable: false
                page:
                  type: integer
                  description: 'The page number for pagination.'
                  example: 0
                  nullable: false
                limit:
                  type: integer
                  description: 'The number of items per page (1-100).'
                  example: 10
                  nullable: false
                filter:
                  type: string
                  description: 'Filter event metas by description.'
                  example: '"Important"'
                  nullable: false
                sorting:
                  type: string
                  description: 'Sort event metas by column and direction (column:direction).'
                  example: '"created_at:desc"'
                  nullable: false
                parent_id:
                  type: integer
                  description: 'Filter event metas by parent ID.'
                  example: 1
                  nullable: false
      security: []
    parameters:
      -
        in: path
        name: account
        description: ''
        example: consequatur
        required: true
        schema:
          type: string
  '/api/{account}/manager/event-metas-fields':
    get:
      summary: 'List the fields of the event meta model.'
      operationId: listTheFieldsOfTheEventMetaModel
      description: 'Get the structure and field types of the event meta model.'
      parameters: []
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Events meta management'
      security: []
    parameters:
      -
        in: path
        name: account
        description: ''
        example: consequatur
        required: true
        schema:
          type: string
  '/api/{account}/manager/event-metas-upload':
    post:
      summary: 'Upload a CSV file for bulk event meta processing.'
      operationId: uploadACSVFileForBulkEventMetaProcessing
      description: 'Upload a CSV file to create multiple event metas at once.'
      parameters: []
      responses: {  }
      tags:
        - 'Events meta management'
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
                  description: 'The CSV file to upload (max 1MB). Must be a CSV file.'
                  nullable: false
                header_mapping:
                  type: array
                  description: 'Array of headers mapping to event meta fields.'
                  example:
                    - consequatur
                  items:
                    type: string
              required:
                - file
                - header_mapping
      security: []
    get:
      summary: 'Get the status of a bulk event meta upload.'
      operationId: getTheStatusOfABulkEventMetaUpload
      description: 'Check the progress of a previously submitted bulk upload.'
      parameters: []
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Events meta management'
      security: []
    parameters:
      -
        in: path
        name: account
        description: ''
        example: consequatur
        required: true
        schema:
          type: string
  '/api/{account}/manager/event-metas-upload/{id}':
    delete:
      summary: 'Delete a bulk event meta upload.'
      operationId: deleteABulkEventMetaUpload
      description: 'Remove a pending or processing bulk upload.'
      parameters: []
      responses: {  }
      tags:
        - 'Events meta management'
      security: []
    parameters:
      -
        in: path
        name: account
        description: ''
        example: consequatur
        required: true
        schema:
          type: string
      -
        in: path
        name: id
        description: 'The ID of the event metas upload.'
        example: consequatur
        required: true
        schema:
          type: string
  '/api/{account}/manager/coupon-free':
    get:
      summary: 'Display a listing of free coin coupons.'
      operationId: displayAListingOfFreeCoinCoupons
      description: 'Get a paginated list of all free coin coupons.'
      parameters: []
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Free Coin Coupon management'
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                page:
                  type: integer
                  description: 'The page number for pagination.'
                  example: 0
                  nullable: false
                limit:
                  type: integer
                  description: 'The number of items per page (1-100).'
                  example: 10
                  nullable: false
                filter:
                  type: string
                  description: 'Filter coupons by code.'
                  example: '"WELCOME"'
                  nullable: false
                sorting:
                  type: string
                  description: 'Sort coupons by column and direction (column:direction).'
                  example: '"created_at:desc"'
                  nullable: false
                parent_id:
                  type: integer
                  description: 'Filter coupons by parent ID.'
                  example: 1
                  nullable: false
      security: []
    post:
      summary: 'Store a newly created free coin coupon.'
      operationId: storeANewlyCreatedFreeCoinCoupon
      description: 'Create a new free coin coupon with the provided data.'
      parameters: []
      responses: {  }
      tags:
        - 'Free Coin Coupon management'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                coupon:
                  type: string
                  description: 'The coupon code (4-150 chars).'
                  example: '"WELCOME2023"'
                  nullable: false
                plumas:
                  type: integer
                  description: 'The number of plumas (feathers) to award.'
                  example: 100
                  nullable: false
                uses:
                  type: integer
                  description: 'The current number of uses.'
                  example: 0
                  nullable: false
                max_uses:
                  type: integer
                  description: 'The maximum number of uses allowed.'
                  example: 1000
                  nullable: false
                start_date:
                  type: datetime
                  description: 'The start date and time of the coupon validity.'
                  example: '"2023-01-01 00:00:00"'
                  nullable: false
                end_date:
                  type: datetime
                  description: 'The end date and time of the coupon validity.'
                  example: '"2023-12-31 23:59:59"'
                  nullable: false
              required:
                - coupon
                - start_date
                - end_date
      security: []
    delete:
      summary: 'Remove the specified free coin coupon.'
      operationId: removeTheSpecifiedFreeCoinCoupon
      description: 'Delete a free coin coupon by ID.'
      parameters: []
      responses: {  }
      tags:
        - 'Free Coin Coupon management'
      security: []
    parameters:
      -
        in: path
        name: account
        description: ''
        example: consequatur
        required: true
        schema:
          type: string
  '/api/{account}/manager/coupon-free/{id}':
    get:
      summary: 'Display the specified free coin coupon.'
      operationId: displayTheSpecifiedFreeCoinCoupon
      description: 'Get details of a specific free coin coupon by ID.'
      parameters: []
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Free Coin Coupon management'
      security: []
    put:
      summary: 'Update the specified free coin coupon.'
      operationId: updateTheSpecifiedFreeCoinCoupon
      description: 'Update an existing free coin coupon with the provided data.'
      parameters: []
      responses: {  }
      tags:
        - 'Free Coin Coupon management'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                coupon:
                  type: string
                  description: 'The coupon code (4-150 chars).'
                  example: '"WELCOME2023"'
                  nullable: false
                plumas:
                  type: integer
                  description: 'The number of plumas (feathers) to award.'
                  example: 100
                  nullable: false
                uses:
                  type: integer
                  description: 'The current number of uses.'
                  example: 0
                  nullable: false
                max_uses:
                  type: integer
                  description: 'The maximum number of uses allowed.'
                  example: 1000
                  nullable: false
                start_date:
                  type: datetime
                  description: 'The start date and time of the coupon validity.'
                  example: '"2023-01-01 00:00:00"'
                  nullable: false
                end_date:
                  type: datetime
                  description: 'The end date and time of the coupon validity.'
                  example: '"2023-12-31 23:59:59"'
                  nullable: false
              required:
                - coupon
                - start_date
                - end_date
      security: []
    delete:
      summary: 'Remove the specified free coin coupon.'
      operationId: removeTheSpecifiedFreeCoinCoupon
      description: 'Delete a free coin coupon by ID.'
      parameters: []
      responses: {  }
      tags:
        - 'Free Coin Coupon management'
      security: []
    parameters:
      -
        in: path
        name: account
        description: ''
        example: consequatur
        required: true
        schema:
          type: string
      -
        in: path
        name: id
        description: 'The ID of the coupon free.'
        example: consequatur
        required: true
        schema:
          type: string
  '/api/{account}/manager/coupon-free-download':
    get:
      summary: 'Download free coin coupons as CSV or JSON.'
      operationId: downloadFreeCoinCouponsAsCSVOrJSON
      description: 'Export the free coin coupon data in CSV or JSON format.'
      parameters: []
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Free Coin Coupon management'
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                type:
                  type: string
                  description: 'The file format to download (csv or json).'
                  example: '"csv"'
                  nullable: false
                page:
                  type: integer
                  description: 'The page number for pagination.'
                  example: 0
                  nullable: false
                limit:
                  type: integer
                  description: 'The number of items per page (1-100).'
                  example: 10
                  nullable: false
                filter:
                  type: string
                  description: 'Filter coupons by code.'
                  example: '"WELCOME"'
                  nullable: false
                sorting:
                  type: string
                  description: 'Sort coupons by column and direction (column:direction).'
                  example: '"created_at:desc"'
                  nullable: false
                parent_id:
                  type: integer
                  description: 'Filter coupons by parent ID.'
                  example: 1
                  nullable: false
      security: []
    parameters:
      -
        in: path
        name: account
        description: ''
        example: consequatur
        required: true
        schema:
          type: string
  '/api/{account}/manager/coupon-free-fields':
    get:
      summary: 'List the fields of the free coin coupon model.'
      operationId: listTheFieldsOfTheFreeCoinCouponModel
      description: 'Get the structure and field types of the free coin coupon model.'
      parameters: []
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Free Coin Coupon management'
      security: []
    parameters:
      -
        in: path
        name: account
        description: ''
        example: consequatur
        required: true
        schema:
          type: string
  '/api/{account}/manager/coupon-free-upload':
    post:
      summary: 'Upload a CSV file for bulk free coin coupon processing.'
      operationId: uploadACSVFileForBulkFreeCoinCouponProcessing
      description: 'Upload a CSV file to create multiple free coin coupons at once.'
      parameters: []
      responses: {  }
      tags:
        - 'Free Coin Coupon management'
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
                  description: 'The CSV file to upload (max 1MB). Must be a CSV file.'
                  nullable: false
                header_mapping:
                  type: array
                  description: 'Array of headers mapping to free coin coupon fields.'
                  example:
                    - consequatur
                  items:
                    type: string
              required:
                - file
                - header_mapping
      security: []
    get:
      summary: 'Get the status of a bulk free coin coupon upload.'
      operationId: getTheStatusOfABulkFreeCoinCouponUpload
      description: 'Check the progress of a previously submitted bulk upload.'
      parameters: []
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Free Coin Coupon management'
      security: []
    parameters:
      -
        in: path
        name: account
        description: ''
        example: consequatur
        required: true
        schema:
          type: string
  '/api/{account}/manager/coupon-free-upload/{id}':
    delete:
      summary: 'Delete a bulk free coin coupon upload.'
      operationId: deleteABulkFreeCoinCouponUpload
      description: 'Remove a pending or processing bulk upload.'
      parameters: []
      responses: {  }
      tags:
        - 'Free Coin Coupon management'
      security: []
    parameters:
      -
        in: path
        name: account
        description: ''
        example: consequatur
        required: true
        schema:
          type: string
      -
        in: path
        name: id
        description: 'The ID of the coupon free upload.'
        example: consequatur
        required: true
        schema:
          type: string
  '/api/{account}/coupon/usePlumasCoupon':
    post:
      summary: 'Use a plumas (feathers) coupon.'
      operationId: useAPlumasfeathersCoupon
      description: 'Redeem a coupon code to receive plumas (feathers).'
      parameters: []
      responses: {  }
      tags:
        - 'Free Coin Coupon management'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                coupon:
                  type: string
                  description: 'The coupon code to redeem.'
                  example: '"WELCOME2023"'
                  nullable: false
              required:
                - coupon
      security: []
    parameters:
      -
        in: path
        name: account
        description: ''
        example: consequatur
        required: true
        schema:
          type: string
  '/api/{account}/coupon/useOroCoupon':
    post:
      summary: 'Use an oro (gold) coupon.'
      operationId: useAnOrogoldCoupon
      description: 'Redeem a coupon code to receive oro (gold).'
      parameters: []
      responses: {  }
      tags:
        - 'Free Coin Coupon management'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                coupon:
                  type: string
                  description: 'The coupon code to redeem.'
                  example: '"GOLD2023"'
                  nullable: false
              required:
                - coupon
      security: []
    parameters:
      -
        in: path
        name: account
        description: ''
        example: consequatur
        required: true
        schema:
          type: string
  '/api/{account}/coupon/useItemCoupon':
    post:
      summary: 'Use an item coupon.'
      operationId: useAnItemCoupon
      description: 'Redeem a coupon code to receive an item.'
      parameters: []
      responses: {  }
      tags:
        - 'Free Coin Coupon management'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                coupon:
                  type: string
                  description: 'The coupon code to redeem.'
                  example: '"ITEM2023"'
                  nullable: false
              required:
                - coupon
      security: []
    parameters:
      -
        in: path
        name: account
        description: ''
        example: consequatur
        required: true
        schema:
          type: string
  '/api/{account}/coupon/useCoupon':
    post:
      summary: 'Use any type of coupon.'
      operationId: useAnyTypeOfCoupon
      description: 'Redeem a coupon code with a prefix to determine the type (p- for plumas, o- for oro, i- for item).'
      parameters: []
      responses: {  }
      tags:
        - 'Free Coin Coupon management'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                coupon:
                  type: string
                  description: 'The coupon code to redeem with prefix (p-, o-, i-).'
                  example: '"p-WELCOME2023"'
                  nullable: false
              required:
                - coupon
      security: []
    parameters:
      -
        in: path
        name: account
        description: ''
        example: consequatur
        required: true
        schema:
          type: string
  '/api/{account}/habit/post':
    post:
      summary: ''
      operationId: postApiAccountHabitPost
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Habit management'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: integer
                  description: ''
                  example: 17
                  nullable: false
                name:
                  type: string
                  description: ''
                  example: consequatur
                  nullable: false
                order:
                  type: integer
                  description: ''
                  example: 17
                  nullable: false
              required:
                - name
      security: []
    parameters:
      -
        in: path
        name: account
        description: ''
        example: consequatur
        required: true
        schema:
          type: string
  '/api/{account}/habit/postComplete':
    post:
      summary: ''
      operationId: postApiAccountHabitPostComplete
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Habit management'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: integer
                  description: ''
                  example: 17
                  nullable: false
              required:
                - id
      security: []
    parameters:
      -
        in: path
        name: account
        description: ''
        example: consequatur
        required: true
        schema:
          type: string
  '/api/{account}/manager/coupon-items':
    get:
      summary: 'Display a listing of item coupons.'
      operationId: displayAListingOfItemCoupons
      description: 'Get a paginated list of all item coupons.'
      parameters: []
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Item Coupons management'
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                page:
                  type: integer
                  description: 'The page number for pagination.'
                  example: 0
                  nullable: false
                limit:
                  type: integer
                  description: 'The number of items per page (1-100).'
                  example: 10
                  nullable: false
                filter:
                  type: string
                  description: 'Filter coupons by code.'
                  example: '"ITEM"'
                  nullable: false
                sorting:
                  type: string
                  description: 'Sort coupons by column and direction (column:direction).'
                  example: '"created_at:desc"'
                  nullable: false
                parent_id:
                  type: integer
                  description: 'Filter coupons by parent ID.'
                  example: 1
                  nullable: false
      security: []
    post:
      summary: 'Store a newly created item coupon.'
      operationId: storeANewlyCreatedItemCoupon
      description: 'Create a new item coupon with the provided data.'
      parameters: []
      responses: {  }
      tags:
        - 'Item Coupons management'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                coupon:
                  type: string
                  description: 'The coupon code (4-150 chars).'
                  example: '"ITEM2023"'
                  nullable: false
                nft_id:
                  type: integer
                  description: 'The ID of the NFT to award.'
                  example: 5
                  nullable: false
                rarity:
                  type: string
                  description: 'The rarity filter for NFTs.'
                  example: '"Legendary,Rare"'
                  nullable: false
                tags:
                  type: string
                  description: 'The tags filter for NFTs.'
                  example: '"Fire,Water"'
                  nullable: false
                nft_serial_greater_equal:
                  type: integer
                  description: 'The minimum serial number for NFTs.'
                  example: 100
                  nullable: false
                nft_serial_less_equal:
                  type: integer
                  description: 'The maximum serial number for NFTs.'
                  example: 200
                  nullable: false
                uses:
                  type: integer
                  description: 'The current number of uses.'
                  example: 0
                  nullable: false
                max_uses:
                  type: integer
                  description: 'The maximum number of uses allowed.'
                  example: 1000
                  nullable: false
                start_date:
                  type: datetime
                  description: 'The start date and time of the coupon validity.'
                  example: '"2023-01-01 00:00:00"'
                  nullable: false
                end_date:
                  type: datetime
                  description: 'The end date and time of the coupon validity.'
                  example: '"2023-12-31 23:59:59"'
                  nullable: false
              required:
                - coupon
                - start_date
                - end_date
      security: []
    delete:
      summary: 'Remove the specified item coupon.'
      operationId: removeTheSpecifiedItemCoupon
      description: 'Delete an item coupon by ID.'
      parameters: []
      responses: {  }
      tags:
        - 'Item Coupons management'
      security: []
    parameters:
      -
        in: path
        name: account
        description: ''
        example: consequatur
        required: true
        schema:
          type: string
  '/api/{account}/manager/coupon-items/{id}':
    get:
      summary: 'Display the specified item coupon.'
      operationId: displayTheSpecifiedItemCoupon
      description: 'Get details of a specific item coupon by ID.'
      parameters: []
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Item Coupons management'
      security: []
    put:
      summary: 'Update the specified item coupon.'
      operationId: updateTheSpecifiedItemCoupon
      description: 'Update an existing item coupon with the provided data.'
      parameters: []
      responses: {  }
      tags:
        - 'Item Coupons management'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                coupon:
                  type: string
                  description: 'The coupon code (4-150 chars).'
                  example: '"ITEM2023"'
                  nullable: false
                nft_id:
                  type: integer
                  description: 'The ID of the NFT to award.'
                  example: 5
                  nullable: false
                rarity:
                  type: string
                  description: 'The rarity filter for NFTs.'
                  example: '"Legendary,Rare"'
                  nullable: false
                tags:
                  type: string
                  description: 'The tags filter for NFTs.'
                  example: '"Fire,Water"'
                  nullable: false
                nft_serial_greater_equal:
                  type: integer
                  description: 'The minimum serial number for NFTs.'
                  example: 100
                  nullable: false
                nft_serial_less_equal:
                  type: integer
                  description: 'The maximum serial number for NFTs.'
                  example: 200
                  nullable: false
                uses:
                  type: integer
                  description: 'The current number of uses.'
                  example: 0
                  nullable: false
                max_uses:
                  type: integer
                  description: 'The maximum number of uses allowed.'
                  example: 1000
                  nullable: false
                start_date:
                  type: datetime
                  description: 'The start date and time of the coupon validity.'
                  example: '"2023-01-01 00:00:00"'
                  nullable: false
                end_date:
                  type: datetime
                  description: 'The end date and time of the coupon validity.'
                  example: '"2023-12-31 23:59:59"'
                  nullable: false
              required:
                - coupon
                - start_date
                - end_date
      security: []
    delete:
      summary: 'Remove the specified item coupon.'
      operationId: removeTheSpecifiedItemCoupon
      description: 'Delete an item coupon by ID.'
      parameters: []
      responses: {  }
      tags:
        - 'Item Coupons management'
      security: []
    parameters:
      -
        in: path
        name: account
        description: ''
        example: consequatur
        required: true
        schema:
          type: string
      -
        in: path
        name: id
        description: 'The ID of the coupon item.'
        example: consequatur
        required: true
        schema:
          type: string
  '/api/{account}/manager/coupon-items-download':
    get:
      summary: 'Download item coupons as CSV or JSON.'
      operationId: downloadItemCouponsAsCSVOrJSON
      description: 'Export the item coupon data in CSV or JSON format.'
      parameters: []
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Item Coupons management'
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                type:
                  type: string
                  description: 'The file format to download (csv or json).'
                  example: '"csv"'
                  nullable: false
                page:
                  type: integer
                  description: 'The page number for pagination.'
                  example: 0
                  nullable: false
                limit:
                  type: integer
                  description: 'The number of items per page (1-100).'
                  example: 10
                  nullable: false
                filter:
                  type: string
                  description: 'Filter coupons by code.'
                  example: '"ITEM"'
                  nullable: false
                sorting:
                  type: string
                  description: 'Sort coupons by column and direction (column:direction).'
                  example: '"created_at:desc"'
                  nullable: false
                parent_id:
                  type: integer
                  description: 'Filter coupons by parent ID.'
                  example: 1
                  nullable: false
      security: []
    parameters:
      -
        in: path
        name: account
        description: ''
        example: consequatur
        required: true
        schema:
          type: string
  '/api/{account}/manager/coupon-items-fields':
    get:
      summary: 'List the fields of the item coupon model.'
      operationId: listTheFieldsOfTheItemCouponModel
      description: 'Get the structure and field types of the item coupon model.'
      parameters: []
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Item Coupons management'
      security: []
    parameters:
      -
        in: path
        name: account
        description: ''
        example: consequatur
        required: true
        schema:
          type: string
  '/api/{account}/manager/coupon-items-upload':
    post:
      summary: 'Upload a CSV file for bulk item coupon processing.'
      operationId: uploadACSVFileForBulkItemCouponProcessing
      description: 'Upload a CSV file to create multiple item coupons at once.'
      parameters: []
      responses: {  }
      tags:
        - 'Item Coupons management'
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
                  description: 'The CSV file to upload (max 1MB). Must be a CSV file.'
                  nullable: false
                header_mapping:
                  type: array
                  description: 'Array of headers mapping to item coupon fields.'
                  example:
                    - consequatur
                  items:
                    type: string
              required:
                - file
                - header_mapping
      security: []
    get:
      summary: 'Get the status of a bulk item coupon upload.'
      operationId: getTheStatusOfABulkItemCouponUpload
      description: 'Check the progress of a previously submitted bulk upload.'
      parameters: []
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Item Coupons management'
      security: []
    parameters:
      -
        in: path
        name: account
        description: ''
        example: consequatur
        required: true
        schema:
          type: string
  '/api/{account}/manager/coupon-items-upload/{id}':
    delete:
      summary: 'Delete a bulk item coupon upload.'
      operationId: deleteABulkItemCouponUpload
      description: 'Remove a pending or processing bulk upload.'
      parameters: []
      responses: {  }
      tags:
        - 'Item Coupons management'
      security: []
    parameters:
      -
        in: path
        name: account
        description: ''
        example: consequatur
        required: true
        schema:
          type: string
      -
        in: path
        name: id
        description: 'The ID of the coupon items upload.'
        example: consequatur
        required: true
        schema:
          type: string
  '/api/{account}/manager/nft':
    get:
      summary: 'Display a listing of Items.'
      operationId: displayAListingOfItems
      description: 'Get a paginated list of all Items.'
      parameters: []
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Item management'
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                page:
                  type: integer
                  description: 'The page number for pagination.'
                  example: 0
                  nullable: false
                limit:
                  type: integer
                  description: 'The number of items per page (1-100).'
                  example: 10
                  nullable: false
                filter:
                  type: string
                  description: 'Filter items by name.'
                  example: '"Phoenix"'
                  nullable: false
                sorting:
                  type: string
                  description: 'Sort items by column and direction (column:direction).'
                  example: '"created_at:desc"'
                  nullable: false
                parent_id:
                  type: integer
                  description: 'Filter items by parent ID.'
                  example: 1
                  nullable: false
      security: []
    post:
      summary: 'Store a newly created Item.'
      operationId: storeANewlyCreatedItem
      description: 'Create a new Item with the provided data.'
      parameters: []
      responses: {  }
      tags:
        - 'Item management'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: 'The name of the Item.'
                  example: '"Rare Phoenix"'
                  nullable: false
                short_description:
                  type: string
                  description: 'The short description of the Item.'
                  example: '"A rare phoenix collectible"'
                  nullable: false
                description:
                  type: string
                  description: 'The detailed description of the Item.'
                  example: '"This is a detailed description of the rare phoenix collectible"'
                  nullable: false
                category:
                  type: string
                  description: 'The category of the Item.'
                  example: '"Collectible"'
                  nullable: false
                subcategory:
                  type: string
                  description: 'The subcategory of the Item.'
                  example: '"Mythical"'
                  nullable: false
                portrait_image:
                  type: string
                  description: 'The portrait image URL of the Item.'
                  example: '"https://example.com/portrait.jpg"'
                  nullable: false
                featured_image:
                  type: string
                  description: 'The featured image URL of the Item.'
                  example: '"https://example.com/featured.jpg"'
                  nullable: false
                token_props:
                  type: integer
                  description: 'The token properties.'
                  example: 1
                  nullable: false
                token_realm:
                  type: integer
                  description: 'The token realm.'
                  example: 2
                  nullable: false
                token_number:
                  type: integer
                  description: 'The token number.'
                  example: 3
                  nullable: false
              required:
                - name
                - token_props
                - token_realm
                - token_number
      security: []
    delete:
      summary: 'Remove the specified Item.'
      operationId: removeTheSpecifiedItem
      description: 'Delete an Item by ID.'
      parameters: []
      responses: {  }
      tags:
        - 'Item management'
      security: []
    parameters:
      -
        in: path
        name: account
        description: ''
        example: consequatur
        required: true
        schema:
          type: string
  '/api/{account}/manager/nft/{id}':
    get:
      summary: 'Display the specified Item.'
      operationId: displayTheSpecifiedItem
      description: 'Get details of a specific Item by ID.'
      parameters: []
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Item management'
      security: []
    put:
      summary: 'Update the specified Item.'
      operationId: updateTheSpecifiedItem
      description: 'Update an existing Item with the provided data.'
      parameters: []
      responses: {  }
      tags:
        - 'Item management'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: 'The name of the Item.'
                  example: '"Rare Phoenix"'
                  nullable: false
                short_description:
                  type: string
                  description: 'The short description of the Item.'
                  example: '"A rare phoenix collectible"'
                  nullable: false
                description:
                  type: string
                  description: 'The detailed description of the Item.'
                  example: '"This is a detailed description of the rare phoenix collectible"'
                  nullable: false
                category:
                  type: string
                  description: 'The category of the Item.'
                  example: '"Collectible"'
                  nullable: false
                subcategory:
                  type: string
                  description: 'The subcategory of the Item.'
                  example: '"Mythical"'
                  nullable: false
                portrait_image:
                  type: string
                  description: 'The portrait image URL of the Item.'
                  example: '"https://example.com/portrait.jpg"'
                  nullable: false
                featured_image:
                  type: string
                  description: 'The featured image URL of the Item.'
                  example: '"https://example.com/featured.jpg"'
                  nullable: false
                token_props:
                  type: integer
                  description: 'The token properties.'
                  example: 1
                  nullable: false
                token_realm:
                  type: integer
                  description: 'The token realm.'
                  example: 2
                  nullable: false
                token_number:
                  type: integer
                  description: 'The token number.'
                  example: 3
                  nullable: false
              required:
                - name
                - token_props
                - token_realm
                - token_number
      security: []
    delete:
      summary: 'Remove the specified Item.'
      operationId: removeTheSpecifiedItem
      description: 'Delete an Item by ID.'
      parameters: []
      responses: {  }
      tags:
        - 'Item management'
      security: []
    parameters:
      -
        in: path
        name: account
        description: ''
        example: consequatur
        required: true
        schema:
          type: string
      -
        in: path
        name: id
        description: 'The ID of the nft.'
        example: consequatur
        required: true
        schema:
          type: string
  '/api/{account}/manager/nft-download':
    get:
      summary: 'Download Items as CSV or JSON.'
      operationId: downloadItemsAsCSVOrJSON
      description: 'Export the Item data in CSV or JSON format.'
      parameters: []
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Item management'
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                type:
                  type: string
                  description: 'The file format to download (csv or json).'
                  example: '"csv"'
                  nullable: false
                page:
                  type: integer
                  description: 'The page number for pagination.'
                  example: 0
                  nullable: false
                limit:
                  type: integer
                  description: 'The number of items per page (1-100).'
                  example: 10
                  nullable: false
                filter:
                  type: string
                  description: 'Filter items by name.'
                  example: '"Phoenix"'
                  nullable: false
                sorting:
                  type: string
                  description: 'Sort items by column and direction (column:direction).'
                  example: '"created_at:desc"'
                  nullable: false
                parent_id:
                  type: integer
                  description: 'Filter items by parent ID.'
                  example: 1
                  nullable: false
      security: []
    parameters:
      -
        in: path
        name: account
        description: ''
        example: consequatur
        required: true
        schema:
          type: string
  '/api/{account}/manager/nft-fields':
    get:
      summary: 'List the fields of the Item model.'
      operationId: listTheFieldsOfTheItemModel
      description: 'Get the structure and field types of the Item model.'
      parameters: []
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Item management'
      security: []
    parameters:
      -
        in: path
        name: account
        description: ''
        example: consequatur
        required: true
        schema:
          type: string
  '/api/{account}/manager/nft-upload':
    post:
      summary: 'Upload a CSV file for bulk Item processing.'
      operationId: uploadACSVFileForBulkItemProcessing
      description: 'Upload a CSV file to create multiple Items at once.'
      parameters: []
      responses: {  }
      tags:
        - 'Item management'
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
                  description: 'The CSV file to upload (max 1MB). Must be a CSV file.'
                  nullable: false
                header_mapping:
                  type: array
                  description: 'Array of headers mapping to Item fields.'
                  example:
                    - consequatur
                  items:
                    type: string
              required:
                - file
                - header_mapping
      security: []
    get:
      summary: 'Get the status of a bulk Item upload.'
      operationId: getTheStatusOfABulkItemUpload
      description: 'Check the progress of a previously submitted bulk upload.'
      parameters: []
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Item management'
      security: []
    parameters:
      -
        in: path
        name: account
        description: ''
        example: consequatur
        required: true
        schema:
          type: string
  '/api/{account}/manager/nft-upload/{id}':
    delete:
      summary: 'Delete a bulk Item upload.'
      operationId: deleteABulkItemUpload
      description: 'Remove a pending or processing bulk upload.'
      parameters: []
      responses: {  }
      tags:
        - 'Item management'
      security: []
    parameters:
      -
        in: path
        name: account
        description: ''
        example: consequatur
        required: true
        schema:
          type: string
      -
        in: path
        name: id
        description: 'The ID of the nft upload.'
        example: consequatur
        required: true
        schema:
          type: string
  '/api/{account}/thePhoenixDiary/getCharacters':
    get:
      summary: 'Get available characters for Phoenix Diary.'
      operationId: getAvailableCharactersForPhoenixDiary
      description: 'Retrieve a list of all available characters for the Phoenix Diary game.'
      parameters: []
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Phoenix Diary management'
      security: []
    parameters:
      -
        in: path
        name: account
        description: ''
        example: consequatur
        required: true
        schema:
          type: string
  '/api/{account}/thePhoenixDiary/createNewGame':
    post:
      summary: 'Create a new Phoenix Diary game.'
      operationId: createANewPhoenixDiaryGame
      description: 'Start a new game session with the selected character.'
      parameters: []
      responses: {  }
      tags:
        - 'Phoenix Diary management'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                character_id:
                  type: integer
                  description: 'The ID of the character to use in the game.'
                  example: 1
                  nullable: false
              required:
                - character_id
      security: []
    parameters:
      -
        in: path
        name: account
        description: ''
        example: consequatur
        required: true
        schema:
          type: string
  '/api/{account}/manager/poll':
    get:
      summary: 'Display a listing of polls.'
      operationId: displayAListingOfPolls
      description: 'Get a paginated list of all polls.'
      parameters: []
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Poll management'
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                page:
                  type: integer
                  description: 'The page number for pagination.'
                  example: 0
                  nullable: false
                limit:
                  type: integer
                  description: 'The number of items per page (1-100).'
                  example: 10
                  nullable: false
                filter:
                  type: string
                  description: 'Filter polls by name.'
                  example: '"Community Survey"'
                  nullable: false
                sorting:
                  type: string
                  description: 'Sort polls by column and direction (column:direction).'
                  example: '"created_at:desc"'
                  nullable: false
                parent_id:
                  type: integer
                  description: 'Filter polls by parent ID.'
                  example: 1
                  nullable: false
      security: []
    post:
      summary: 'Store a newly created poll.'
      operationId: storeANewlyCreatedPoll
      description: 'Create a new poll with the provided data.'
      parameters: []
      responses: {  }
      tags:
        - 'Poll management'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: 'The name of the poll.'
                  example: '"Community Feedback Survey"'
                  nullable: false
                short_description:
                  type: string
                  description: 'The short description of the poll.'
                  example: '"A quick survey about our latest features"'
                  nullable: false
                description:
                  type: string
                  description: 'The detailed description of the poll.'
                  example: '"This survey aims to collect feedback about our latest platform features and improvements."'
                  nullable: false
                portrait_image:
                  type: string
                  description: 'The portrait image URL of the poll.'
                  example: '"https://example.com/portrait.jpg"'
                  nullable: false
                featured_image:
                  type: string
                  description: 'The featured image URL of the poll.'
                  example: '"https://example.com/featured.jpg"'
                  nullable: false
                answers:
                  type: string
                  description: 'The possible answers for the poll in JSON format.'
                  example: "\"['Yes', 'No', 'Maybe']\""
                  nullable: false
                start_date:
                  type: datetime
                  description: 'The start date and time of the poll.'
                  example: '"2023-01-01 00:00:00"'
                  nullable: false
                end_date:
                  type: datetime
                  description: 'The end date and time of the poll.'
                  example: '"2023-01-31 23:59:59"'
                  nullable: false
              required:
                - name
                - start_date
                - end_date
      security: []
    delete:
      summary: 'Remove the specified poll.'
      operationId: removeTheSpecifiedPoll
      description: 'Delete a poll by ID.'
      parameters: []
      responses: {  }
      tags:
        - 'Poll management'
      security: []
    parameters:
      -
        in: path
        name: account
        description: ''
        example: consequatur
        required: true
        schema:
          type: string
  '/api/{account}/manager/poll/{id}':
    get:
      summary: 'Display the specified poll.'
      operationId: displayTheSpecifiedPoll
      description: 'Get details of a specific poll by ID.'
      parameters: []
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Poll management'
      security: []
    put:
      summary: 'Update the specified poll.'
      operationId: updateTheSpecifiedPoll
      description: 'Update an existing poll with the provided data.'
      parameters: []
      responses: {  }
      tags:
        - 'Poll management'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: 'The name of the poll.'
                  example: '"Updated Community Feedback Survey"'
                  nullable: false
                short_description:
                  type: string
                  description: 'The short description of the poll.'
                  example: '"A quick survey about our latest features"'
                  nullable: false
                description:
                  type: string
                  description: 'The detailed description of the poll.'
                  example: '"This survey aims to collect feedback about our latest platform features and improvements."'
                  nullable: false
                portrait_image:
                  type: string
                  description: 'The portrait image URL of the poll.'
                  example: '"https://example.com/portrait.jpg"'
                  nullable: false
                featured_image:
                  type: string
                  description: 'The featured image URL of the poll.'
                  example: '"https://example.com/featured.jpg"'
                  nullable: false
                answers:
                  type: string
                  description: 'The possible answers for the poll in JSON format.'
                  example: "\"['Yes', 'No', 'Maybe']\""
                  nullable: false
                start_date:
                  type: datetime
                  description: 'The start date and time of the poll.'
                  example: '"2023-01-01 00:00:00"'
                  nullable: false
                end_date:
                  type: datetime
                  description: 'The end date and time of the poll.'
                  example: '"2023-01-31 23:59:59"'
                  nullable: false
              required:
                - name
                - start_date
                - end_date
      security: []
    delete:
      summary: 'Remove the specified poll.'
      operationId: removeTheSpecifiedPoll
      description: 'Delete a poll by ID.'
      parameters: []
      responses: {  }
      tags:
        - 'Poll management'
      security: []
    parameters:
      -
        in: path
        name: account
        description: ''
        example: consequatur
        required: true
        schema:
          type: string
      -
        in: path
        name: id
        description: 'The ID of the poll.'
        example: consequatur
        required: true
        schema:
          type: string
  '/api/{account}/manager/poll-download':
    get:
      summary: 'Download polls as CSV or JSON.'
      operationId: downloadPollsAsCSVOrJSON
      description: 'Export the poll data in CSV or JSON format.'
      parameters: []
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Poll management'
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                type:
                  type: string
                  description: 'The file format to download (csv or json).'
                  example: '"csv"'
                  nullable: false
                page:
                  type: integer
                  description: 'The page number for pagination.'
                  example: 0
                  nullable: false
                limit:
                  type: integer
                  description: 'The number of items per page (1-100).'
                  example: 10
                  nullable: false
                filter:
                  type: string
                  description: 'Filter polls by name.'
                  example: '"Community Survey"'
                  nullable: false
                sorting:
                  type: string
                  description: 'Sort polls by column and direction (column:direction).'
                  example: '"created_at:desc"'
                  nullable: false
                parent_id:
                  type: integer
                  description: 'Filter polls by parent ID.'
                  example: 1
                  nullable: false
      security: []
    parameters:
      -
        in: path
        name: account
        description: ''
        example: consequatur
        required: true
        schema:
          type: string
  '/api/{account}/manager/poll-fields':
    get:
      summary: 'List the fields of the poll model.'
      operationId: listTheFieldsOfThePollModel
      description: 'Get the structure and field types of the poll model.'
      parameters: []
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Poll management'
      security: []
    parameters:
      -
        in: path
        name: account
        description: ''
        example: consequatur
        required: true
        schema:
          type: string
  '/api/{account}/manager/poll-upload':
    post:
      summary: 'Upload a CSV file for bulk poll processing.'
      operationId: uploadACSVFileForBulkPollProcessing
      description: 'Upload a CSV file to create multiple polls at once.'
      parameters: []
      responses: {  }
      tags:
        - 'Poll management'
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
                  description: 'The CSV file to upload (max 1MB). Must be a CSV file.'
                  nullable: false
                header_mapping:
                  type: array
                  description: 'Array of headers mapping to poll fields.'
                  example:
                    - consequatur
                  items:
                    type: string
              required:
                - file
                - header_mapping
      security: []
    get:
      summary: 'Get the status of a bulk poll upload.'
      operationId: getTheStatusOfABulkPollUpload
      description: 'Check the progress of a previously submitted bulk upload.'
      parameters: []
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Poll management'
      security: []
    parameters:
      -
        in: path
        name: account
        description: ''
        example: consequatur
        required: true
        schema:
          type: string
  '/api/{account}/manager/poll-upload/{id}':
    delete:
      summary: 'Delete a bulk poll upload.'
      operationId: deleteABulkPollUpload
      description: 'Remove a pending or processing bulk upload.'
      parameters: []
      responses: {  }
      tags:
        - 'Poll management'
      security: []
    parameters:
      -
        in: path
        name: account
        description: ''
        example: consequatur
        required: true
        schema:
          type: string
      -
        in: path
        name: id
        description: 'The ID of the poll upload.'
        example: consequatur
        required: true
        schema:
          type: string
  '/api/{account}/poll/pollDetails':
    get:
      summary: 'Get details of a specific poll.'
      operationId: getDetailsOfASpecificPoll
      description: 'Retrieve detailed information about a poll including its status for the current user.'
      parameters: []
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Poll management'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                poll_id:
                  type: integer
                  description: 'The ID of the poll to get details for.'
                  example: 1
                  nullable: false
                active:
                  type: boolean
                  description: 'Whether to only include active polls.'
                  example: true
                  nullable: false
              required:
                - poll_id
                - active
      security: []
    parameters:
      -
        in: path
        name: account
        description: ''
        example: consequatur
        required: true
        schema:
          type: string
  '/api/{account}/poll/pollsDetailsLast30Days':
    get:
      summary: 'Get details of polls from the last 30 days.'
      operationId: getDetailsOfPollsFromTheLast30Days
      description: 'Retrieve information about all polls that were active in the last 30 days.'
      parameters: []
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Poll management'
      security: []
    parameters:
      -
        in: path
        name: account
        description: ''
        example: consequatur
        required: true
        schema:
          type: string
  '/api/{account}/poll/answerPoll':
    post:
      summary: 'Submit an answer to a poll.'
      operationId: submitAnAnswerToAPoll
      description: "Record a user's response to a specific poll."
      parameters: []
      responses: {  }
      tags:
        - 'Poll management'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                poll_id:
                  type: integer
                  description: 'The ID of the poll to answer.'
                  example: 1
                  nullable: false
                answer:
                  type: string
                  description: "The user's answer to the poll."
                  example: '"Yes"'
                  nullable: false
              required:
                - poll_id
                - answer
      security: []
    parameters:
      -
        in: path
        name: account
        description: ''
        example: consequatur
        required: true
        schema:
          type: string
  '/api/{account}/manager/coupon-payment':
    get:
      summary: 'Display a listing of premium coin coupons.'
      operationId: displayAListingOfPremiumCoinCoupons
      description: 'Get a paginated list of all premium coin coupons.'
      parameters: []
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Premium Coin Coupons management'
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                page:
                  type: integer
                  description: 'The page number for pagination.'
                  example: 0
                  nullable: false
                limit:
                  type: integer
                  description: 'The number of items per page (1-100).'
                  example: 10
                  nullable: false
                filter:
                  type: string
                  description: 'Filter coupons by code.'
                  example: '"GOLD"'
                  nullable: false
                sorting:
                  type: string
                  description: 'Sort coupons by column and direction (column:direction).'
                  example: '"created_at:desc"'
                  nullable: false
                parent_id:
                  type: integer
                  description: 'Filter coupons by parent ID.'
                  example: 1
                  nullable: false
      security: []
    post:
      summary: 'Store a newly created premium coin coupon.'
      operationId: storeANewlyCreatedPremiumCoinCoupon
      description: 'Create a new premium coin coupon with the provided data.'
      parameters: []
      responses: {  }
      tags:
        - 'Premium Coin Coupons management'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                coupon:
                  type: string
                  description: 'The coupon code (4-150 chars).'
                  example: '"GOLD2023"'
                  nullable: false
                oro:
                  type: integer
                  description: 'The number of oro (gold) to award.'
                  example: 50
                  nullable: false
                uses:
                  type: integer
                  description: 'The current number of uses.'
                  example: 0
                  nullable: false
                max_uses:
                  type: integer
                  description: 'The maximum number of uses allowed.'
                  example: 1000
                  nullable: false
                start_date:
                  type: datetime
                  description: 'The start date and time of the coupon validity.'
                  example: '"2023-01-01 00:00:00"'
                  nullable: false
                end_date:
                  type: datetime
                  description: 'The end date and time of the coupon validity.'
                  example: '"2023-12-31 23:59:59"'
                  nullable: false
              required:
                - coupon
                - start_date
                - end_date
      security: []
    delete:
      summary: 'Remove the specified premium coin coupon.'
      operationId: removeTheSpecifiedPremiumCoinCoupon
      description: 'Delete a premium coin coupon by ID.'
      parameters: []
      responses: {  }
      tags:
        - 'Premium Coin Coupons management'
      security: []
    parameters:
      -
        in: path
        name: account
        description: ''
        example: consequatur
        required: true
        schema:
          type: string
  '/api/{account}/manager/coupon-payment/{id}':
    get:
      summary: 'Display the specified premium coin coupon.'
      operationId: displayTheSpecifiedPremiumCoinCoupon
      description: 'Get details of a specific premium coin coupon by ID.'
      parameters: []
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Premium Coin Coupons management'
      security: []
    put:
      summary: 'Update the specified premium coin coupon.'
      operationId: updateTheSpecifiedPremiumCoinCoupon
      description: 'Update an existing premium coin coupon with the provided data.'
      parameters: []
      responses: {  }
      tags:
        - 'Premium Coin Coupons management'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                coupon:
                  type: string
                  description: 'The coupon code (4-150 chars).'
                  example: '"GOLD2023"'
                  nullable: false
                oro:
                  type: integer
                  description: 'The number of oro (gold) to award.'
                  example: 50
                  nullable: false
                uses:
                  type: integer
                  description: 'The current number of uses.'
                  example: 0
                  nullable: false
                max_uses:
                  type: integer
                  description: 'The maximum number of uses allowed.'
                  example: 1000
                  nullable: false
                start_date:
                  type: datetime
                  description: 'The start date and time of the coupon validity.'
                  example: '"2023-01-01 00:00:00"'
                  nullable: false
                end_date:
                  type: datetime
                  description: 'The end date and time of the coupon validity.'
                  example: '"2023-12-31 23:59:59"'
                  nullable: false
              required:
                - coupon
                - start_date
                - end_date
      security: []
    delete:
      summary: 'Remove the specified premium coin coupon.'
      operationId: removeTheSpecifiedPremiumCoinCoupon
      description: 'Delete a premium coin coupon by ID.'
      parameters: []
      responses: {  }
      tags:
        - 'Premium Coin Coupons management'
      security: []
    parameters:
      -
        in: path
        name: account
        description: ''
        example: consequatur
        required: true
        schema:
          type: string
      -
        in: path
        name: id
        description: 'The ID of the coupon payment.'
        example: consequatur
        required: true
        schema:
          type: string
  '/api/{account}/manager/coupon-payment-download':
    get:
      summary: 'Download premium coin coupons as CSV or JSON.'
      operationId: downloadPremiumCoinCouponsAsCSVOrJSON
      description: 'Export the premium coin coupon data in CSV or JSON format.'
      parameters: []
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Premium Coin Coupons management'
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                type:
                  type: string
                  description: 'The file format to download (csv or json).'
                  example: '"csv"'
                  nullable: false
                page:
                  type: integer
                  description: 'The page number for pagination.'
                  example: 0
                  nullable: false
                limit:
                  type: integer
                  description: 'The number of items per page (1-100).'
                  example: 10
                  nullable: false
                filter:
                  type: string
                  description: 'Filter coupons by code.'
                  example: '"GOLD"'
                  nullable: false
                sorting:
                  type: string
                  description: 'Sort coupons by column and direction (column:direction).'
                  example: '"created_at:desc"'
                  nullable: false
                parent_id:
                  type: integer
                  description: 'Filter coupons by parent ID.'
                  example: 1
                  nullable: false
      security: []
    parameters:
      -
        in: path
        name: account
        description: ''
        example: consequatur
        required: true
        schema:
          type: string
  '/api/{account}/manager/coupon-payment-fields':
    get:
      summary: 'List the fields of the premium coin coupon model.'
      operationId: listTheFieldsOfThePremiumCoinCouponModel
      description: 'Get the structure and field types of the premium coin coupon model.'
      parameters: []
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Premium Coin Coupons management'
      security: []
    parameters:
      -
        in: path
        name: account
        description: ''
        example: consequatur
        required: true
        schema:
          type: string
  '/api/{account}/manager/coupon-payment-upload':
    post:
      summary: 'Upload a CSV file for bulk premium coin coupon processing.'
      operationId: uploadACSVFileForBulkPremiumCoinCouponProcessing
      description: 'Upload a CSV file to create multiple premium coin coupons at once.'
      parameters: []
      responses: {  }
      tags:
        - 'Premium Coin Coupons management'
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
                  description: 'The CSV file to upload (max 1MB). Must be a CSV file.'
                  nullable: false
                header_mapping:
                  type: array
                  description: 'Array of headers mapping to premium coin coupon fields.'
                  example:
                    - consequatur
                  items:
                    type: string
              required:
                - file
                - header_mapping
      security: []
    get:
      summary: 'Get the status of a bulk premium coin coupon upload.'
      operationId: getTheStatusOfABulkPremiumCoinCouponUpload
      description: 'Check the progress of a previously submitted bulk upload.'
      parameters: []
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Premium Coin Coupons management'
      security: []
    parameters:
      -
        in: path
        name: account
        description: ''
        example: consequatur
        required: true
        schema:
          type: string
  '/api/{account}/manager/coupon-payment-upload/{id}':
    delete:
      summary: 'Delete a bulk premium coin coupon upload.'
      operationId: deleteABulkPremiumCoinCouponUpload
      description: 'Remove a pending or processing bulk upload.'
      parameters: []
      responses: {  }
      tags:
        - 'Premium Coin Coupons management'
      security: []
    parameters:
      -
        in: path
        name: account
        description: ''
        example: consequatur
        required: true
        schema:
          type: string
      -
        in: path
        name: id
        description: 'The ID of the coupon payment upload.'
        example: consequatur
        required: true
        schema:
          type: string
  '/api/{account}/manager/product-order':
    get:
      summary: 'Display a listing of product orders.'
      operationId: displayAListingOfProductOrders
      description: 'Get a paginated list of all product orders.'
      parameters: []
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Product Order management'
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                page:
                  type: integer
                  description: 'The page number for pagination.'
                  example: 0
                  nullable: false
                limit:
                  type: integer
                  description: 'The number of items per page (1-100).'
                  example: 10
                  nullable: false
                filter:
                  type: string
                  description: 'Filter product orders by ID.'
                  example: '"123"'
                  nullable: false
                sorting:
                  type: string
                  description: 'Sort product orders by column and direction (column:direction).'
                  example: '"created_at:desc"'
                  nullable: false
                parent_id:
                  type: integer
                  description: 'Filter product orders by product ID.'
                  example: 1
                  nullable: false
      security: []
    delete:
      summary: 'Remove the specified product order.'
      operationId: removeTheSpecifiedProductOrder
      description: 'Delete a product order by ID.'
      parameters: []
      responses: {  }
      tags:
        - 'Product Order management'
      security: []
    parameters:
      -
        in: path
        name: account
        description: ''
        example: consequatur
        required: true
        schema:
          type: string
  '/api/{account}/manager/product-order/{id}':
    delete:
      summary: 'Remove the specified product order.'
      operationId: removeTheSpecifiedProductOrder
      description: 'Delete a product order by ID.'
      parameters: []
      responses: {  }
      tags:
        - 'Product Order management'
      security: []
    parameters:
      -
        in: path
        name: account
        description: ''
        example: consequatur
        required: true
        schema:
          type: string
      -
        in: path
        name: id
        description: 'The ID of the product order.'
        example: consequatur
        required: true
        schema:
          type: string
  '/api/{account}/manager/product-order-download':
    get:
      summary: 'Download product orders as CSV or JSON.'
      operationId: downloadProductOrdersAsCSVOrJSON
      description: 'Export the product order data in CSV or JSON format.'
      parameters: []
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Product Order management'
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                type:
                  type: string
                  description: 'The file format to download (csv or json).'
                  example: '"csv"'
                  nullable: false
                page:
                  type: integer
                  description: 'The page number for pagination.'
                  example: 0
                  nullable: false
                limit:
                  type: integer
                  description: 'The number of items per page (1-100).'
                  example: 10
                  nullable: false
                filter:
                  type: string
                  description: 'Filter product orders by ID.'
                  example: '"123"'
                  nullable: false
                sorting:
                  type: string
                  description: 'Sort product orders by column and direction (column:direction).'
                  example: '"created_at:desc"'
                  nullable: false
                parent_id:
                  type: integer
                  description: 'Filter product orders by product ID.'
                  example: 1
                  nullable: false
      security: []
    parameters:
      -
        in: path
        name: account
        description: ''
        example: consequatur
        required: true
        schema:
          type: string
  '/api/{account}/store/validateProductOrder':
    post:
      summary: ''
      operationId: postApiAccountStoreValidateProductOrder
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Product management'
      security: []
    parameters:
      -
        in: path
        name: account
        description: ''
        example: consequatur
        required: true
        schema:
          type: string
  '/api/{account}/manager/product':
    get:
      summary: 'Display a listing of products.'
      operationId: displayAListingOfProducts
      description: 'Get a paginated list of all products.'
      parameters: []
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Product management'
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                page:
                  type: integer
                  description: 'The page number for pagination.'
                  example: 0
                  nullable: false
                limit:
                  type: integer
                  description: 'The number of items per page (1-100).'
                  example: 10
                  nullable: false
                filter:
                  type: string
                  description: 'Filter products by name.'
                  example: '"Phoenix"'
                  nullable: false
                sorting:
                  type: string
                  description: 'Sort products by column and direction (column:direction).'
                  example: '"created_at:desc"'
                  nullable: false
                parent_id:
                  type: integer
                  description: 'Filter products by parent ID.'
                  example: 1
                  nullable: false
      security: []
    post:
      summary: 'Store a newly created product.'
      operationId: storeANewlyCreatedProduct
      description: 'Create a new product with the provided data.'
      parameters: []
      responses: {  }
      tags:
        - 'Product management'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: 'The name of the product.'
                  example: '"Gold Pack"'
                  nullable: false
                short_description:
                  type: string
                  description: 'The short description of the product.'
                  example: '"A pack of gold coins"'
                  nullable: false
                description:
                  type: string
                  description: 'The detailed description of the product.'
                  example: '"This pack contains 1000 gold coins"'
                  nullable: false
                image:
                  type: string
                  description: 'The image URL of the product.'
                  example: '"https://example.com/gold-pack.jpg"'
                  nullable: false
                price_fiat:
                  type: string
                  description: 'The price in fiat currency.'
                  example: '"9.99"'
                  nullable: false
                price_oro:
                  type: integer
                  description: 'The price in oro currency.'
                  example: 500
                  nullable: false
                price_plumas:
                  type: integer
                  description: 'The price in plumas currency.'
                  example: 100
                  nullable: false
                active:
                  type: integer
                  description: 'Whether the product is active (0 or 1).'
                  example: 1
                  nullable: false
                product_parent_id:
                  type: integer
                  description: 'The ID of the parent product.'
                  example: 1
                  nullable: false
                oro:
                  type: integer
                  description: 'The amount of oro included in the product.'
                  example: 1000
                  nullable: false
                plumas:
                  type: integer
                  description: 'The amount of plumas included in the product.'
                  example: 200
                  nullable: false
                nft_id:
                  type: integer
                  description: 'The ID of the NFT included in the product.'
                  example: 5
                  nullable: false
                rarity:
                  type: string
                  description: 'The rarity of the NFT included in the product.'
                  example: '"Legendary"'
                  nullable: false
                tags:
                  type: string
                  description: 'Tags for the product.'
                  example: '"gold,premium"'
                  nullable: false
                nft_serial_greater_equal:
                  type: integer
                  description: 'The minimum NFT serial number.'
                  example: 1
                  nullable: false
                nft_serial_less_equal:
                  type: integer
                  description: 'The maximum NFT serial number.'
                  example: 100
                  nullable: false
                custom:
                  type: string
                  description: 'Custom information for the product.'
                  example: '"Pase de temporada premium"'
                  nullable: false
                one_time_purchase:
                  type: integer
                  description: 'Whether the product can only be purchased once per user (0 or 1).'
                  example: 1
                  nullable: false
                one_time_purchase_global:
                  type: integer
                  description: 'Whether the product can only be purchased once globally (0 or 1).'
                  example: 0
                  nullable: false
              required:
                - name
      security: []
    delete:
      summary: 'Remove the specified product.'
      operationId: removeTheSpecifiedProduct
      description: 'Delete a product by ID.'
      parameters: []
      responses: {  }
      tags:
        - 'Product management'
      security: []
    parameters:
      -
        in: path
        name: account
        description: ''
        example: consequatur
        required: true
        schema:
          type: string
  '/api/{account}/manager/product/{id}':
    get:
      summary: 'Display the specified product.'
      operationId: displayTheSpecifiedProduct
      description: 'Get details of a specific product by ID.'
      parameters: []
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Product management'
      security: []
    put:
      summary: 'Update the specified product.'
      operationId: updateTheSpecifiedProduct
      description: 'Update an existing product with the provided data.'
      parameters: []
      responses: {  }
      tags:
        - 'Product management'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: 'The name of the product.'
                  example: '"Gold Pack"'
                  nullable: false
                short_description:
                  type: string
                  description: 'The short description of the product.'
                  example: '"A pack of gold coins"'
                  nullable: false
                description:
                  type: string
                  description: 'The detailed description of the product.'
                  example: '"This pack contains 1000 gold coins"'
                  nullable: false
                image:
                  type: string
                  description: 'The image URL of the product.'
                  example: '"https://example.com/gold-pack.jpg"'
                  nullable: false
                price_fiat:
                  type: string
                  description: 'The price in fiat currency.'
                  example: '"9.99"'
                  nullable: false
                price_oro:
                  type: integer
                  description: 'The price in oro currency.'
                  example: 500
                  nullable: false
                price_plumas:
                  type: integer
                  description: 'The price in plumas currency.'
                  example: 100
                  nullable: false
                active:
                  type: integer
                  description: 'Whether the product is active (0 or 1).'
                  example: 1
                  nullable: false
                product_parent_id:
                  type: integer
                  description: 'The ID of the parent product.'
                  example: 1
                  nullable: false
                oro:
                  type: integer
                  description: 'The amount of oro included in the product.'
                  example: 1000
                  nullable: false
                plumas:
                  type: integer
                  description: 'The amount of plumas included in the product.'
                  example: 200
                  nullable: false
                nft_id:
                  type: integer
                  description: 'The ID of the NFT included in the product.'
                  example: 5
                  nullable: false
                rarity:
                  type: string
                  description: 'The rarity of the NFT included in the product.'
                  example: '"Legendary"'
                  nullable: false
                tags:
                  type: string
                  description: 'Tags for the product.'
                  example: '"gold,premium"'
                  nullable: false
                nft_serial_greater_equal:
                  type: integer
                  description: 'The minimum NFT serial number.'
                  example: 1
                  nullable: false
                nft_serial_less_equal:
                  type: integer
                  description: 'The maximum NFT serial number.'
                  example: 100
                  nullable: false
                custom:
                  type: string
                  description: 'Custom information for the product.'
                  example: '"Pase de temporada premium"'
                  nullable: false
                one_time_purchase:
                  type: integer
                  description: 'Whether the product can only be purchased once per user (0 or 1).'
                  example: 1
                  nullable: false
                one_time_purchase_global:
                  type: integer
                  description: 'Whether the product can only be purchased once globally (0 or 1).'
                  example: 0
                  nullable: false
              required:
                - name
      security: []
    delete:
      summary: 'Remove the specified product.'
      operationId: removeTheSpecifiedProduct
      description: 'Delete a product by ID.'
      parameters: []
      responses: {  }
      tags:
        - 'Product management'
      security: []
    parameters:
      -
        in: path
        name: account
        description: ''
        example: consequatur
        required: true
        schema:
          type: string
      -
        in: path
        name: id
        description: 'The ID of the product.'
        example: consequatur
        required: true
        schema:
          type: string
  '/api/{account}/manager/product-download':
    get:
      summary: 'Download products as CSV or JSON.'
      operationId: downloadProductsAsCSVOrJSON
      description: 'Export the product data in CSV or JSON format.'
      parameters: []
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Product management'
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                type:
                  type: string
                  description: 'The file format to download (csv or json).'
                  example: '"csv"'
                  nullable: false
                page:
                  type: integer
                  description: 'The page number for pagination.'
                  example: 0
                  nullable: false
                limit:
                  type: integer
                  description: 'The number of items per page (1-100).'
                  example: 10
                  nullable: false
                filter:
                  type: string
                  description: 'Filter products by name.'
                  example: '"Gold"'
                  nullable: false
                sorting:
                  type: string
                  description: 'Sort products by column and direction (column:direction).'
                  example: '"created_at:desc"'
                  nullable: false
                parent_id:
                  type: integer
                  description: 'Filter products by parent ID.'
                  example: 1
                  nullable: false
      security: []
    parameters:
      -
        in: path
        name: account
        description: ''
        example: consequatur
        required: true
        schema:
          type: string
  '/api/{account}/manager/product-fields':
    get:
      summary: 'List the fields of the Product model.'
      operationId: listTheFieldsOfTheProductModel
      description: 'Get the structure and field types of the Product model.'
      parameters: []
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Product management'
      security: []
    parameters:
      -
        in: path
        name: account
        description: ''
        example: consequatur
        required: true
        schema:
          type: string
  '/api/{account}/manager/product-upload':
    post:
      summary: 'Upload a CSV file for bulk Product processing.'
      operationId: uploadACSVFileForBulkProductProcessing
      description: 'Upload a CSV file to create multiple Products at once.'
      parameters: []
      responses: {  }
      tags:
        - 'Product management'
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
                  description: 'The CSV file to upload (max 1MB). Must be a CSV file.'
                  nullable: false
                header_mapping:
                  type: array
                  description: 'Array of headers mapping to Product fields.'
                  example:
                    - consequatur
                  items:
                    type: string
              required:
                - file
                - header_mapping
      security: []
    get:
      summary: 'Get the status of a bulk Product upload.'
      operationId: getTheStatusOfABulkProductUpload
      description: 'Check the progress of a previously submitted bulk upload.'
      parameters: []
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Product management'
      security: []
    parameters:
      -
        in: path
        name: account
        description: ''
        example: consequatur
        required: true
        schema:
          type: string
  '/api/{account}/manager/product-upload/{id}':
    delete:
      summary: 'Delete a bulk Product upload.'
      operationId: deleteABulkProductUpload
      description: 'Remove a pending or processing bulk upload.'
      parameters: []
      responses: {  }
      tags:
        - 'Product management'
      security: []
    parameters:
      -
        in: path
        name: account
        description: ''
        example: consequatur
        required: true
        schema:
          type: string
      -
        in: path
        name: id
        description: 'The ID of the product upload.'
        example: consequatur
        required: true
        schema:
          type: string
  '/api/{account}/store/details':
    get:
      summary: ''
      operationId: getApiAccountStoreDetails
      description: ''
      parameters: []
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Product management'
      security: []
    parameters:
      -
        in: path
        name: account
        description: ''
        example: consequatur
        required: true
        schema:
          type: string
  '/api/{account}/store/addProductToOrder':
    post:
      summary: ''
      operationId: postApiAccountStoreAddProductToOrder
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Product management'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                product_id:
                  type: string
                  description: ''
                  example: consequatur
                  nullable: false
              required:
                - product_id
      security: []
    parameters:
      -
        in: path
        name: account
        description: ''
        example: consequatur
        required: true
        schema:
          type: string
  '/api/{account}/store/addEventGiftToOrder':
    post:
      summary: ''
      operationId: postApiAccountStoreAddEventGiftToOrder
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Product management'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                event_id:
                  type: string
                  description: ''
                  example: consequatur
                  nullable: false
              required:
                - event_id
      security: []
    parameters:
      -
        in: path
        name: account
        description: ''
        example: consequatur
        required: true
        schema:
          type: string
  '/api/{account}/store/getLastProductOrders':
    get:
      summary: ''
      operationId: getApiAccountStoreGetLastProductOrders
      description: ''
      parameters: []
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Product management'
      security: []
    parameters:
      -
        in: path
        name: account
        description: ''
        example: consequatur
        required: true
        schema:
          type: string
  '/api/{account}/manager/admin-dashboard':
    get:
      summary: 'Get admin dashboard statistics.'
      operationId: getAdminDashboardStatistics
      description: 'Retrieve platform-wide statistics for the admin dashboard.'
      parameters: []
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Profile management'
      security: []
    parameters:
      -
        in: path
        name: account
        description: ''
        example: consequatur
        required: true
        schema:
          type: string
  '/api/{account}/manager/profile':
    get:
      summary: 'Display a listing of profiles.'
      operationId: displayAListingOfProfiles
      description: 'Get a paginated list of all user profiles.'
      parameters: []
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Profile management'
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                page:
                  type: integer
                  description: 'The page number for pagination.'
                  example: 0
                  nullable: false
                limit:
                  type: integer
                  description: 'The number of items per page (1-100).'
                  example: 10
                  nullable: false
                filter:
                  type: string
                  description: 'Filter profiles by description.'
                  example: '"Aprendiz"'
                  nullable: false
                sorting:
                  type: string
                  description: 'Sort profiles by column and direction (column:direction).'
                  example: '"created_at:desc"'
                  nullable: false
                parent_id:
                  type: integer
                  description: 'Filter profiles by parent ID.'
                  example: 1
                  nullable: false
      security: []
    parameters:
      -
        in: path
        name: account
        description: ''
        example: consequatur
        required: true
        schema:
          type: string
  '/api/{account}/manager/profile/{id}':
    get:
      summary: 'Display the specified profile.'
      operationId: displayTheSpecifiedProfile
      description: 'Get details of a specific profile by ID.'
      parameters: []
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Profile management'
      security: []
    put:
      summary: 'Update the specified profile.'
      operationId: updateTheSpecifiedProfile
      description: 'Update an existing profile with the provided data.'
      parameters: []
      responses: {  }
      tags:
        - 'Profile management'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                user_id:
                  type: integer
                  description: 'The ID of the user this profile belongs to.'
                  example: 1
                  nullable: false
                description:
                  type: string
                  description: 'The description/status of the profile (4-255 chars).'
                  example: '"Aprendiz"'
                  nullable: false
                details:
                  type: string
                  description: 'Additional details about the profile.'
                  example: '"Joined during Season 1"'
                  nullable: false
                avatar:
                  type: string
                  description: 'The avatar URL or identifier (4-255 chars).'
                  example: '"avatar1.jpg"'
                  nullable: false
                plumas_hedera:
                  type: integer
                  description: 'The number of plumas (feathers) on Hedera.'
                  example: 0
                  nullable: false
                plumas:
                  type: integer
                  description: 'The number of plumas (feathers).'
                  example: 10
                  nullable: false
                season_level:
                  type: integer
                  description: 'The current season level.'
                  example: 1
                  nullable: false
                season_points:
                  type: integer
                  description: 'The current season points.'
                  example: 100
                  nullable: false
                oro_hedera:
                  type: integer
                  description: 'The number of oro (gold) on Hedera.'
                  example: 0
                  nullable: false
                oro:
                  type: integer
                  description: 'The number of oro (gold).'
                  example: 5
                  nullable: false
                twitch_user_id:
                  type: string
                  description: 'The Twitch user ID.'
                  example: '"12345678"'
                  nullable: false
                twitch_user_name:
                  type: string
                  description: 'The Twitch username.'
                  example: '"twitchuser"'
                  nullable: false
                twitch_api_user_token:
                  type: string
                  description: 'The Twitch API user token.'
                  example: '"abc123token"'
                  nullable: false
                twitch_api_user_refresh_token:
                  type: string
                  description: 'The Twitch API refresh token.'
                  example: '"abc123refresh"'
                  nullable: false
                twitch_scope:
                  type: string
                  description: 'The Twitch API scope.'
                  example: '"user:read:email"'
                  nullable: false
                steam_user_id:
                  type: string
                  description: 'The Steam user ID.'
                  example: '"76561198123456789"'
                  nullable: false
                steam_user_name:
                  type: string
                  description: 'The Steam username.'
                  example: '"steamuser"'
                  nullable: false
              required:
                - user_id
                - description
                - avatar
      security: []
    parameters:
      -
        in: path
        name: account
        description: ''
        example: consequatur
        required: true
        schema:
          type: string
      -
        in: path
        name: id
        description: 'The ID of the profile.'
        example: consequatur
        required: true
        schema:
          type: string
  '/api/{account}/manager/profile-download':
    get:
      summary: 'Download profiles as CSV or JSON.'
      operationId: downloadProfilesAsCSVOrJSON
      description: 'Export the profile data in CSV or JSON format.'
      parameters: []
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Profile management'
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                type:
                  type: string
                  description: 'The file format to download (csv or json).'
                  example: '"csv"'
                  nullable: false
                page:
                  type: integer
                  description: 'The page number for pagination.'
                  example: 0
                  nullable: false
                limit:
                  type: integer
                  description: 'The number of items per page (1-100).'
                  example: 10
                  nullable: false
                filter:
                  type: string
                  description: 'Filter profiles by description.'
                  example: '"Aprendiz"'
                  nullable: false
                sorting:
                  type: string
                  description: 'Sort profiles by column and direction (column:direction).'
                  example: '"created_at:desc"'
                  nullable: false
                parent_id:
                  type: integer
                  description: 'Filter profiles by parent ID.'
                  example: 1
                  nullable: false
      security: []
    parameters:
      -
        in: path
        name: account
        description: ''
        example: consequatur
        required: true
        schema:
          type: string
  '/api/{account}/profile/addPlumas':
    post:
      summary: 'Add plumas to user.'
      operationId: addPlumasToUser
      description: "Add a specified amount of plumas (feathers) to the current user's profile."
      parameters: []
      responses: {  }
      tags:
        - 'Profile management'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                user_id:
                  type: integer
                  description: ''
                  example: 17
                  nullable: false
                plumas:
                  type: integer
                  description: 'The amount of plumas to add.'
                  example: 10
                  nullable: false
              required:
                - user_id
                - plumas
      security: []
    parameters:
      -
        in: path
        name: account
        description: ''
        example: consequatur
        required: true
        schema:
          type: string
  '/api/{account}/profile/addOro':
    post:
      summary: 'Add oro to user.'
      operationId: addOroToUser
      description: "Add a specified amount of oro (gold) to the current user's profile."
      parameters: []
      responses: {  }
      tags:
        - 'Profile management'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                user_id:
                  type: integer
                  description: 'The ID of the user to add oro to.'
                  example: 1
                  nullable: false
                oro:
                  type: integer
                  description: 'The amount of oro to add.'
                  example: 5
                  nullable: false
              required:
                - user_id
                - oro
      security: []
    parameters:
      -
        in: path
        name: account
        description: ''
        example: consequatur
        required: true
        schema:
          type: string
  '/api/{account}/profile/getUserProfile':
    post:
      summary: "Get current user's profile."
      operationId: getCurrentUsersProfile
      description: "Retrieve detailed information about the authenticated user's profile, including habits, NFTs, and other statistics."
      parameters: []
      responses: {  }
      tags:
        - 'Profile management'
      security: []
    parameters:
      -
        in: path
        name: account
        description: ''
        example: consequatur
        required: true
        schema:
          type: string
  '/api/{account}/profile/setAvatar':
    post:
      summary: 'Set user avatar.'
      operationId: setUserAvatar
      description: "Update the avatar for the current user's profile."
      parameters: []
      responses: {  }
      tags:
        - 'Profile management'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                nft_id:
                  type: string
                  description: ''
                  example: consequatur
                  nullable: false
                avatar:
                  type: string
                  description: 'The new avatar URL or identifier.'
                  example: '"avatar2.jpg"'
                  nullable: false
              required:
                - nft_id
                - avatar
      security: []
    parameters:
      -
        in: path
        name: account
        description: ''
        example: consequatur
        required: true
        schema:
          type: string
  '/api/{account}/profile/setEstado':
    post:
      summary: 'Set user status.'
      operationId: setUserStatus
      description: "Update the status/description for the current user's profile."
      parameters: []
      responses: {  }
      tags:
        - 'Profile management'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                nft_id:
                  type: string
                  description: ''
                  example: consequatur
                  nullable: false
                estado:
                  type: string
                  description: 'The new status/description for the profile.'
                  example: '"Explorador"'
                  nullable: false
              required:
                - nft_id
                - estado
      security: []
    parameters:
      -
        in: path
        name: account
        description: ''
        example: consequatur
        required: true
        schema:
          type: string
  '/api/{account}/profile/subtractPlumaUser':
    post:
      summary: 'Subtract plumas from user.'
      operationId: subtractPlumasFromUser
      description: "Deduct a specified amount of plumas (feathers) from the current user's profile."
      parameters: []
      responses: {  }
      tags:
        - 'Profile management'
      security: []
    parameters:
      -
        in: path
        name: account
        description: ''
        example: consequatur
        required: true
        schema:
          type: string
  '/api/{account}/profile/subtractOroUser':
    post:
      summary: 'Subtract oro from user.'
      operationId: subtractOroFromUser
      description: "Deduct a specified amount of oro (gold) from the current user's profile."
      parameters: []
      responses: {  }
      tags:
        - 'Profile management'
      security: []
    parameters:
      -
        in: path
        name: account
        description: ''
        example: consequatur
        required: true
        schema:
          type: string
  '/api/{account}/profile/setUserProfileReferredCode':
    post:
      summary: "Set user's referral code."
      operationId: setUsersReferralCode
      description: "Update the referral code for the current user's profile."
      parameters: []
      responses: {  }
      tags:
        - 'Profile management'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                referred_code:
                  type: string
                  description: 'The referral code to set.'
                  example: '"REF123"'
                  nullable: false
              required:
                - referred_code
      security: []
    parameters:
      -
        in: path
        name: account
        description: ''
        example: consequatur
        required: true
        schema:
          type: string
  '/api/{account}/profile/setUserProfileReferredCodeFrom':
    post:
      summary: 'Set referral code source.'
      operationId: setReferralCodeSource
      description: "Update the referral code source for the current user's profile."
      parameters: []
      responses: {  }
      tags:
        - 'Profile management'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                referred_code_from:
                  type: string
                  description: 'The referral code that referred this user.'
                  example: '"FRIEND123"'
                  nullable: false
              required:
                - referred_code_from
      security: []
    parameters:
      -
        in: path
        name: account
        description: ''
        example: consequatur
        required: true
        schema:
          type: string
  '/api/{account}/profile/setUserProfileHederaWalletCheck':
    post:
      summary: 'Set Hedera wallet verification status.'
      operationId: setHederaWalletVerificationStatus
      description: "Update the Hedera wallet verification status for the current user's profile."
      parameters: []
      responses: {  }
      tags:
        - 'Profile management'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                account:
                  type: string
                  description: ''
                  example: consequatur
                  nullable: false
                hedera_wallet_check:
                  type: boolean
                  description: 'Whether the Hedera wallet is verified.'
                  example: true
                  nullable: false
                hedera_wallet_check_account:
                  type: string
                  description: 'The Hedera account that verified the wallet.'
                  example: '"0.0.123456"'
                  nullable: false
              required:
                - account
                - hedera_wallet_check
                - hedera_wallet_check_account
      security: []
    parameters:
      -
        in: path
        name: account
        description: ''
        example: consequatur
        required: true
        schema:
          type: string
  '/api/{account}/ranking/getClassification':
    get:
      summary: 'Get game classification/leaderboard.'
      operationId: getGameClassificationleaderboard
      description: 'Retrieve the top 10 players and their scores for a specific game.'
      parameters: []
      responses:
        500:
          description: ''
          content:
            application/json:
              schema:
                type: string
                example: 'Error al establecer la clasificaciÃ³n'
      tags:
        - 'Ranking management'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                game:
                  type: string
                  description: 'The name of the game to get classification for.'
                  example: '"BookersVillage"'
                  nullable: false
              required:
                - game
      security: []
    parameters:
      -
        in: path
        name: account
        description: ''
        example: consequatur
        required: true
        schema:
          type: string
  '/api/{account}/ranking/getGameStarted':
    get:
      summary: 'Check if a game has been started.'
      operationId: checkIfAGameHasBeenStarted
      description: 'Determine if a specific game has been initialized or started.'
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: string
                example: 'No iniciado.'
      tags:
        - 'Ranking management'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                game:
                  type: string
                  description: 'The name of the game to check.'
                  example: '"BookersVillage"'
                  nullable: false
              required:
                - game
      security: []
    parameters:
      -
        in: path
        name: account
        description: ''
        example: consequatur
        required: true
        schema:
          type: string
  '/api/{account}/ranking/addRanking':
    post:
      summary: 'Add a new ranking entry.'
      operationId: addANewRankingEntry
      description: 'Record a new ranking entry for the current user in a specific game.'
      parameters: []
      responses: {  }
      tags:
        - 'Ranking management'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                game:
                  type: string
                  description: 'The name of the game.'
                  example: '"BookersVillage"'
                  nullable: false
                network_group:
                  type: string
                  description: 'The network group identifier.'
                  example: '"Group1"'
                  nullable: false
                fase:
                  type: integer
                  description: 'The phase or level of the game.'
                  example: 1
                  nullable: false
              required:
                - game
                - network_group
                - fase
      security: []
    parameters:
      -
        in: path
        name: account
        description: ''
        example: consequatur
        required: true
        schema:
          type: string
  '/api/{account}/ranking/getRanking':
    get:
      summary: "Get user's best ranking for a game."
      operationId: getUsersBestRankingForAGame
      description: 'Retrieve the best time/score for the current user in a specific game.'
      parameters: []
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Ranking management'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                game:
                  type: string
                  description: 'The name of the game to get ranking for.'
                  example: '"BookersVillage"'
                  nullable: false
              required:
                - game
      security: []
    parameters:
      -
        in: path
        name: account
        description: ''
        example: consequatur
        required: true
        schema:
          type: string
  '/api/{account}/ranking/getSeasonClassificationPerTime':
    get:
      summary: 'Get season game time-based classification/leaderboard.'
      operationId: getSeasonGameTimeBasedClassificationleaderboard
      description: 'Retrieve the top 10 players and their times for a specific game in the current season.'
      parameters: []
      responses:
        500:
          description: ''
          content:
            application/json:
              schema:
                type: string
                example: 'Error al establecer la clasificaciÃ³n'
      tags:
        - 'Rankings season management'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                game:
                  type: string
                  description: 'The name of the game to get classification for.'
                  example: '"NameOfGame"'
                  nullable: false
              required:
                - game
      security: []
    parameters:
      -
        in: path
        name: account
        description: ''
        example: consequatur
        required: true
        schema:
          type: string
  '/api/{account}/ranking/getSeasonClassificationPerPoints':
    get:
      summary: 'Get season game points-based classification/leaderboard.'
      operationId: getSeasonGamePointsBasedClassificationleaderboard
      description: 'Retrieve the top 10 players and their points for a specific game in the current season.'
      parameters: []
      responses:
        500:
          description: ''
          content:
            application/json:
              schema:
                type: string
                example: 'Error al establecer la clasificaciÃ³n'
      tags:
        - 'Rankings season management'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                game:
                  type: string
                  description: 'The name of the game to get classification for.'
                  example: '"NameOfGame"'
                  nullable: false
              required:
                - game
      security: []
    parameters:
      -
        in: path
        name: account
        description: ''
        example: consequatur
        required: true
        schema:
          type: string
  '/api/{account}/ranking/getSeasonGameStarted':
    get:
      summary: 'Check if a season game has been started.'
      operationId: checkIfASeasonGameHasBeenStarted
      description: 'Determine if a specific game has been initialized or started in the current season.'
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: string
                example: 'No iniciado.'
      tags:
        - 'Rankings season management'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                game:
                  type: string
                  description: 'The name of the game to check.'
                  example: '"NameOfGame"'
                  nullable: false
              required:
                - game
      security: []
    parameters:
      -
        in: path
        name: account
        description: ''
        example: consequatur
        required: true
        schema:
          type: string
  '/api/{account}/ranking/addSeasonRanking':
    post:
      summary: 'Add a new season ranking entry.'
      operationId: addANewSeasonRankingEntry
      description: 'Record a new ranking entry for the current user in a specific game for the current season.'
      parameters: []
      responses: {  }
      tags:
        - 'Rankings season management'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                game:
                  type: string
                  description: 'The name of the game.'
                  example: '"NameOfGame"'
                  nullable: false
                network_group:
                  type: string
                  description: 'The network group identifier.'
                  example: '"Group1"'
                  nullable: false
                fase:
                  type: integer
                  description: 'The phase or level of the game.'
                  example: 1
                  nullable: false
                points:
                  type: integer
                  description: 'The points scored in the game.'
                  example: 1000
                  nullable: false
              required:
                - game
      security: []
    parameters:
      -
        in: path
        name: account
        description: ''
        example: consequatur
        required: true
        schema:
          type: string
  '/api/{account}/ranking/getSeasonRankingPerTime':
    get:
      summary: "Get user's best time-based ranking for a game."
      operationId: getUsersBestTimeBasedRankingForAGame
      description: 'Retrieve the best time for the current user in a specific game.'
      parameters: []
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Rankings season management'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                game:
                  type: string
                  description: 'The name of the game to get ranking for.'
                  example: '"NameOfGame"'
                  nullable: false
              required:
                - game
      security: []
    parameters:
      -
        in: path
        name: account
        description: ''
        example: consequatur
        required: true
        schema:
          type: string
  '/api/{account}/ranking/getSeasonRankingPerPoints':
    get:
      summary: "Get user's best points-based ranking for a game."
      operationId: getUsersBestPointsBasedRankingForAGame
      description: 'Retrieve the best points score for the current user in a specific game.'
      parameters: []
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Rankings season management'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                game:
                  type: string
                  description: 'The name of the game to get ranking for.'
                  example: '"NameOfGame"'
                  nullable: false
              required:
                - game
      security: []
    parameters:
      -
        in: path
        name: account
        description: ''
        example: consequatur
        required: true
        schema:
          type: string
  '/api/{account}/ranking/getSeasonUserClassificationPerTime':
    get:
      summary: "Get user's time-based classification/leaderboard."
      operationId: getUsersTimeBasedClassificationleaderboard
      description: "Retrieve the user's personal time-based leaderboard and any tournament leaderboards they're part of."
      parameters: []
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Rankings season management'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                game:
                  type: string
                  description: 'The name of the game to get classification for.'
                  example: '"NameOfGame"'
                  nullable: false
              required:
                - game
      security: []
    parameters:
      -
        in: path
        name: account
        description: ''
        example: consequatur
        required: true
        schema:
          type: string
  '/api/{account}/ranking/getSeasonUserClassificationPerPoints':
    get:
      summary: "Get user's points-based classification/leaderboard."
      operationId: getUsersPointsBasedClassificationleaderboard
      description: "Retrieve the user's personal points-based leaderboard and any tournament leaderboards they're part of."
      parameters: []
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Rankings season management'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                game:
                  type: string
                  description: 'The name of the game to get classification for.'
                  example: '"NameOfGame"'
                  nullable: false
              required:
                - game
      security: []
    parameters:
      -
        in: path
        name: account
        description: ''
        example: consequatur
        required: true
        schema:
          type: string
  '/api/{account}/manager/season-reward':
    get:
      summary: 'Display a listing of season rewards.'
      operationId: displayAListingOfSeasonRewards
      description: 'Get a paginated list of all season rewards.'
      parameters: []
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Season Rewards management'
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                page:
                  type: integer
                  description: 'The page number for pagination.'
                  example: 0
                  nullable: false
                limit:
                  type: integer
                  description: 'The number of items per page (1-100).'
                  example: 10
                  nullable: false
                filter:
                  type: string
                  description: 'Filter rewards by level.'
                  example: '"5"'
                  nullable: false
                sorting:
                  type: string
                  description: 'Sort rewards by column and direction (column:direction).'
                  example: '"level:asc"'
                  nullable: false
                parent_id:
                  type: integer
                  description: 'Filter rewards by season ID.'
                  example: 1
                  nullable: false
      security: []
    post:
      summary: 'Store a newly created season reward.'
      operationId: storeANewlyCreatedSeasonReward
      description: 'Create a new season reward with the provided data.'
      parameters: []
      responses: {  }
      tags:
        - 'Season Rewards management'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                level:
                  type: integer
                  description: 'The level at which this reward is unlocked.'
                  example: 5
                  nullable: false
                required_points:
                  type: integer
                  description: 'The points required to reach this level.'
                  example: 500
                  nullable: false
                oro:
                  type: integer
                  description: 'The amount of oro (gold) awarded.'
                  example: 50
                  nullable: false
                plumas:
                  type: integer
                  description: 'The amount of plumas (feathers) awarded.'
                  example: 100
                  nullable: false
                nft_id:
                  type: integer
                  description: 'The ID of the NFT awarded.'
                  example: 1
                  nullable: false
                max_nft_rewards:
                  type: integer
                  description: 'The maximum number of NFT rewards available.'
                  example: 100
                  nullable: false
                custom_reward:
                  type: string
                  description: 'Any custom reward description.'
                  example: '"Special avatar frame"'
                  nullable: false
                season_id:
                  type: integer
                  description: 'The ID of the season this reward belongs to.'
                  example: 1
                  nullable: false
              required:
                - level
                - required_points
                - season_id
      security: []
    delete:
      summary: 'Remove the specified season reward.'
      operationId: removeTheSpecifiedSeasonReward
      description: 'Delete a season reward by ID.'
      parameters: []
      responses: {  }
      tags:
        - 'Season Rewards management'
      security: []
    parameters:
      -
        in: path
        name: account
        description: ''
        example: consequatur
        required: true
        schema:
          type: string
  '/api/{account}/manager/season-reward/{id}':
    get:
      summary: 'Display the specified season reward.'
      operationId: displayTheSpecifiedSeasonReward
      description: 'Get details of a specific season reward by ID.'
      parameters: []
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Season Rewards management'
      security: []
    put:
      summary: 'Update the specified season reward.'
      operationId: updateTheSpecifiedSeasonReward
      description: 'Update an existing season reward with the provided data.'
      parameters: []
      responses: {  }
      tags:
        - 'Season Rewards management'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                level:
                  type: integer
                  description: 'The level at which this reward is unlocked.'
                  example: 5
                  nullable: false
                required_points:
                  type: integer
                  description: 'The points required to reach this level.'
                  example: 500
                  nullable: false
                oro:
                  type: integer
                  description: 'The amount of oro (gold) awarded.'
                  example: 50
                  nullable: false
                plumas:
                  type: integer
                  description: 'The amount of plumas (feathers) awarded.'
                  example: 100
                  nullable: false
                nft_id:
                  type: integer
                  description: 'The ID of the NFT awarded.'
                  example: 1
                  nullable: false
                max_nft_rewards:
                  type: integer
                  description: 'The maximum number of NFT rewards available.'
                  example: 100
                  nullable: false
                custom_reward:
                  type: string
                  description: 'Any custom reward description.'
                  example: '"Special avatar frame"'
                  nullable: false
                season_id:
                  type: integer
                  description: 'The ID of the season this reward belongs to.'
                  example: 1
                  nullable: false
              required:
                - level
                - required_points
                - season_id
      security: []
    delete:
      summary: 'Remove the specified season reward.'
      operationId: removeTheSpecifiedSeasonReward
      description: 'Delete a season reward by ID.'
      parameters: []
      responses: {  }
      tags:
        - 'Season Rewards management'
      security: []
    parameters:
      -
        in: path
        name: account
        description: ''
        example: consequatur
        required: true
        schema:
          type: string
      -
        in: path
        name: id
        description: 'The ID of the season reward.'
        example: consequatur
        required: true
        schema:
          type: string
  '/api/{account}/manager/season-reward-download':
    get:
      summary: 'Download season rewards as CSV or JSON.'
      operationId: downloadSeasonRewardsAsCSVOrJSON
      description: 'Export the season reward data in CSV or JSON format.'
      parameters: []
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Season Rewards management'
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                type:
                  type: string
                  description: 'The file format to download (csv or json).'
                  example: '"csv"'
                  nullable: false
                page:
                  type: integer
                  description: 'The page number for pagination.'
                  example: 0
                  nullable: false
                limit:
                  type: integer
                  description: 'The number of items per page (1-100).'
                  example: 10
                  nullable: false
                filter:
                  type: string
                  description: 'Filter rewards by level.'
                  example: '"5"'
                  nullable: false
                sorting:
                  type: string
                  description: 'Sort rewards by column and direction (column:direction).'
                  example: '"level:asc"'
                  nullable: false
                parent_id:
                  type: integer
                  description: 'Filter rewards by season ID.'
                  example: 1
                  nullable: false
      security: []
    parameters:
      -
        in: path
        name: account
        description: ''
        example: consequatur
        required: true
        schema:
          type: string
  '/api/{account}/manager/season-reward-fields':
    get:
      summary: 'List the fields of the season reward model.'
      operationId: listTheFieldsOfTheSeasonRewardModel
      description: 'Get the structure and field types of the season reward model.'
      parameters: []
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Season Rewards management'
      security: []
    parameters:
      -
        in: path
        name: account
        description: ''
        example: consequatur
        required: true
        schema:
          type: string
  '/api/{account}/manager/season-reward-upload':
    post:
      summary: 'Upload a CSV file for bulk season reward processing.'
      operationId: uploadACSVFileForBulkSeasonRewardProcessing
      description: 'Upload a CSV file to create multiple season rewards at once.'
      parameters: []
      responses: {  }
      tags:
        - 'Season Rewards management'
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
                  description: 'The CSV file to upload (max 1MB). Must be a CSV file.'
                  nullable: false
                header_mapping:
                  type: array
                  description: 'Array of headers mapping to season reward fields.'
                  example:
                    - consequatur
                  items:
                    type: string
              required:
                - file
                - header_mapping
      security: []
    get:
      summary: 'Get the status of a bulk season reward upload.'
      operationId: getTheStatusOfABulkSeasonRewardUpload
      description: 'Check the progress of a previously submitted bulk upload.'
      parameters: []
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Season Rewards management'
      security: []
    parameters:
      -
        in: path
        name: account
        description: ''
        example: consequatur
        required: true
        schema:
          type: string
  '/api/{account}/manager/season-reward-upload/{id}':
    delete:
      summary: 'Delete a bulk season reward upload.'
      operationId: deleteABulkSeasonRewardUpload
      description: 'Remove a pending or processing bulk upload.'
      parameters: []
      responses: {  }
      tags:
        - 'Season Rewards management'
      security: []
    parameters:
      -
        in: path
        name: account
        description: ''
        example: consequatur
        required: true
        schema:
          type: string
      -
        in: path
        name: id
        description: 'The ID of the season reward upload.'
        example: consequatur
        required: true
        schema:
          type: string
  '/api/{account}/manager/season':
    get:
      summary: 'Display a listing of seasons.'
      operationId: displayAListingOfSeasons
      description: 'Get a paginated list of all seasons.'
      parameters: []
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Season management'
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                page:
                  type: integer
                  description: 'The page number for pagination.'
                  example: 0
                  nullable: false
                limit:
                  type: integer
                  description: 'The number of items per page (1-100).'
                  example: 10
                  nullable: false
                filter:
                  type: string
                  description: 'Filter seasons by name.'
                  example: '"Summer Season"'
                  nullable: false
                sorting:
                  type: string
                  description: 'Sort seasons by column and direction (column:direction).'
                  example: '"created_at:desc"'
                  nullable: false
                parent_id:
                  type: integer
                  description: 'Filter seasons by parent ID.'
                  example: 1
                  nullable: false
      security: []
    post:
      summary: 'Store a newly created season.'
      operationId: storeANewlyCreatedSeason
      description: 'Create a new season with the provided data.'
      parameters: []
      responses: {  }
      tags:
        - 'Season management'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: 'The name of the season.'
                  example: '"Summer Season 2023"'
                  nullable: false
                max_level:
                  type: integer
                  description: 'The maximum level achievable in this season.'
                  example: 100
                  nullable: false
                max_points:
                  type: integer
                  description: 'The maximum points achievable in this season.'
                  example: 10000
                  nullable: false
                start_date:
                  type: datetime
                  description: 'The start date and time of the season.'
                  example: '"2023-06-01 00:00:00"'
                  nullable: false
                end_date:
                  type: datetime
                  description: 'The end date and time of the season.'
                  example: '"2023-08-31 23:59:59"'
                  nullable: false
              required:
                - name
                - max_level
                - max_points
                - start_date
                - end_date
      security: []
    delete:
      summary: 'Remove the specified season.'
      operationId: removeTheSpecifiedSeason
      description: 'Delete a season by ID.'
      parameters: []
      responses: {  }
      tags:
        - 'Season management'
      security: []
    parameters:
      -
        in: path
        name: account
        description: ''
        example: consequatur
        required: true
        schema:
          type: string
  '/api/{account}/manager/season/{id}':
    get:
      summary: 'Display the specified season.'
      operationId: displayTheSpecifiedSeason
      description: 'Get details of a specific season by ID.'
      parameters: []
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Season management'
      security: []
    put:
      summary: 'Update the specified season.'
      operationId: updateTheSpecifiedSeason
      description: 'Update an existing season with the provided data.'
      parameters: []
      responses: {  }
      tags:
        - 'Season management'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: 'The name of the season.'
                  example: '"Updated Summer Season 2023"'
                  nullable: false
                max_level:
                  type: integer
                  description: 'The maximum level achievable in this season.'
                  example: 100
                  nullable: false
                max_points:
                  type: integer
                  description: 'The maximum points achievable in this season.'
                  example: 10000
                  nullable: false
                start_date:
                  type: datetime
                  description: 'The start date and time of the season.'
                  example: '"2023-06-01 00:00:00"'
                  nullable: false
                end_date:
                  type: datetime
                  description: 'The end date and time of the season.'
                  example: '"2023-08-31 23:59:59"'
                  nullable: false
              required:
                - name
                - max_level
                - max_points
                - start_date
                - end_date
      security: []
    delete:
      summary: 'Remove the specified season.'
      operationId: removeTheSpecifiedSeason
      description: 'Delete a season by ID.'
      parameters: []
      responses: {  }
      tags:
        - 'Season management'
      security: []
    parameters:
      -
        in: path
        name: account
        description: ''
        example: consequatur
        required: true
        schema:
          type: string
      -
        in: path
        name: id
        description: 'The ID of the season.'
        example: consequatur
        required: true
        schema:
          type: string
  '/api/{account}/manager/season-download':
    get:
      summary: 'Download seasons as CSV or JSON.'
      operationId: downloadSeasonsAsCSVOrJSON
      description: 'Export the season data in CSV or JSON format.'
      parameters: []
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Season management'
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                type:
                  type: string
                  description: 'The file format to download (csv or json).'
                  example: '"csv"'
                  nullable: false
                page:
                  type: integer
                  description: 'The page number for pagination.'
                  example: 0
                  nullable: false
                limit:
                  type: integer
                  description: 'The number of items per page (1-100).'
                  example: 10
                  nullable: false
                filter:
                  type: string
                  description: 'Filter seasons by name.'
                  example: '"Summer Season"'
                  nullable: false
                sorting:
                  type: string
                  description: 'Sort seasons by column and direction (column:direction).'
                  example: '"created_at:desc"'
                  nullable: false
                parent_id:
                  type: integer
                  description: 'Filter seasons by parent ID.'
                  example: 1
                  nullable: false
      security: []
    parameters:
      -
        in: path
        name: account
        description: ''
        example: consequatur
        required: true
        schema:
          type: string
  '/api/{account}/manager/season-fields':
    get:
      summary: 'List the fields of the season model.'
      operationId: listTheFieldsOfTheSeasonModel
      description: 'Get the structure and field types of the season model.'
      parameters: []
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Season management'
      security: []
    parameters:
      -
        in: path
        name: account
        description: ''
        example: consequatur
        required: true
        schema:
          type: string
  '/api/{account}/manager/season-upload':
    post:
      summary: 'Upload a CSV file for bulk season processing.'
      operationId: uploadACSVFileForBulkSeasonProcessing
      description: 'Upload a CSV file to create multiple seasons at once.'
      parameters: []
      responses: {  }
      tags:
        - 'Season management'
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
                  description: 'The CSV file to upload (max 1MB). Must be a CSV file.'
                  nullable: false
                header_mapping:
                  type: array
                  description: 'Array of headers mapping to season fields.'
                  example:
                    - consequatur
                  items:
                    type: string
              required:
                - file
                - header_mapping
      security: []
    get:
      summary: 'Get the status of a bulk season upload.'
      operationId: getTheStatusOfABulkSeasonUpload
      description: 'Check the progress of a previously submitted bulk upload.'
      parameters: []
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Season management'
      security: []
    parameters:
      -
        in: path
        name: account
        description: ''
        example: consequatur
        required: true
        schema:
          type: string
  '/api/{account}/manager/season-upload/{id}':
    delete:
      summary: 'Delete a bulk season upload.'
      operationId: deleteABulkSeasonUpload
      description: 'Remove a pending or processing bulk upload.'
      parameters: []
      responses: {  }
      tags:
        - 'Season management'
      security: []
    parameters:
      -
        in: path
        name: account
        description: ''
        example: consequatur
        required: true
        schema:
          type: string
      -
        in: path
        name: id
        description: 'The ID of the season upload.'
        example: consequatur
        required: true
        schema:
          type: string
  '/api/{account}/season/seasonDetails':
    get:
      summary: 'Get details of the current active season.'
      operationId: getDetailsOfTheCurrentActiveSeason
      description: 'Retrieve detailed information about the currently active season, including rewards and user progress.'
      parameters: []
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Season management'
      security: []
    parameters:
      -
        in: path
        name: account
        description: ''
        example: consequatur
        required: true
        schema:
          type: string
  '/api/{account}/season/redeemSeasonLvl':
    post:
      summary: 'Redeem a season level reward.'
      operationId: redeemASeasonLevelReward
      description: 'Claim the reward for a specific level in the current season.'
      parameters: []
      responses: {  }
      tags:
        - 'Season management'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                level:
                  type: integer
                  description: 'The level to redeem the reward for.'
                  example: 5
                  nullable: false
              required:
                - level
      security: []
    parameters:
      -
        in: path
        name: account
        description: ''
        example: consequatur
        required: true
        schema:
          type: string
  '/api/{account}/steam/connectAccount':
    get:
      summary: ''
      operationId: getApiAccountSteamConnectAccount
      description: ''
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: string
                example: Test.
      tags:
        - 'Steam management'
      security: []
    parameters:
      -
        in: path
        name: account
        description: ''
        example: consequatur
        required: true
        schema:
          type: string
  '/api/{account}/steam/disconnectSteam':
    post:
      summary: ''
      operationId: postApiAccountSteamDisconnectSteam
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Steam management'
      security: []
    parameters:
      -
        in: path
        name: account
        description: ''
        example: consequatur
        required: true
        schema:
          type: string
  '/api/{account}/manager/nft-identification':
    get:
      summary: 'Display a listing of SubItem.'
      operationId: displayAListingOfSubItem
      description: 'Get a paginated list of all SubItem.'
      parameters: []
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Subitems management'
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                page:
                  type: integer
                  description: 'The page number for pagination.'
                  example: 0
                  nullable: false
                limit:
                  type: integer
                  description: 'The number of items per page (1-100).'
                  example: 10
                  nullable: false
                filter:
                  type: string
                  description: 'Filter items by name.'
                  example: '"Phoenix"'
                  nullable: false
                sorting:
                  type: string
                  description: 'Sort items by column and direction (column:direction).'
                  example: '"created_at:desc"'
                  nullable: false
                parent_id:
                  type: integer
                  description: 'Filter items by parent Item ID.'
                  example: 1
                  nullable: false
      security: []
    post:
      summary: 'Store a newly created SubItem.'
      operationId: storeANewlyCreatedSubItem
      description: 'Create a new SubItem with the provided data.'
      parameters: []
      responses: {  }
      tags:
        - 'Subitems management'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: 'The name of the SubItem.'
                  example: '"Phoenix #123"'
                  nullable: false
                description:
                  type: string
                  description: 'The description of the SubItem.'
                  example: '"A unique phoenix with special attributes"'
                  nullable: false
                image:
                  type: string
                  description: 'The image URL of the SubItem.'
                  example: '"https://example.com/nft123.jpg"'
                  nullable: false
                nft_identification:
                  type: integer
                  description: 'The unique identification number.'
                  example: 123
                  nullable: false
                nft_id:
                  type: integer
                  description: 'The ID of the parent Item.'
                  example: 1
                  nullable: false
                rarity:
                  type: string
                  description: 'The rarity level of the Item.'
                  example: '"Legendary"'
                  nullable: false
                tag_1:
                  type: string
                  description: 'The first tag for the Item.'
                  example: '"Fire"'
                  nullable: false
                tag_2:
                  type: string
                  description: 'The second tag for the Item.'
                  example: '"Mythical"'
                  nullable: false
                tag_3:
                  type: string
                  description: 'The third tag for the Item.'
                  example: '"Limited"'
                  nullable: false
                madfenix_ownership:
                  type: boolean
                  description: 'Whether the Item is owned by MadFenix.'
                  example: true
                  nullable: false
                user_id:
                  type: integer
                  description: 'The ID of the user who owns this Item.'
                  example: 42
                  nullable: false
                user_id_hedera:
                  type: integer
                  description: 'The ID of the user who owns this Item on Hedera.'
                  example: 42
                  nullable: false
              required:
                - name
                - nft_identification
                - nft_id
      security: []
    delete:
      summary: 'Remove the specified SubItem.'
      operationId: removeTheSpecifiedSubItem
      description: 'Delete an SubItem by ID.'
      parameters: []
      responses: {  }
      tags:
        - 'Subitems management'
      security: []
    parameters:
      -
        in: path
        name: account
        description: ''
        example: consequatur
        required: true
        schema:
          type: string
  '/api/{account}/manager/nft-identification/{id}':
    get:
      summary: 'Display the specified SubItem.'
      operationId: displayTheSpecifiedSubItem
      description: 'Get details of a specific SubItem by ID.'
      parameters: []
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Subitems management'
      security: []
    put:
      summary: 'Update the specified SubItem.'
      operationId: updateTheSpecifiedSubItem
      description: 'Update an existing SubItem with the provided data.'
      parameters: []
      responses: {  }
      tags:
        - 'Subitems management'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: 'The name of the SubItem.'
                  example: '"Phoenix #123"'
                  nullable: false
                description:
                  type: string
                  description: 'The description of the SubItem.'
                  example: '"A unique phoenix with special attributes"'
                  nullable: false
                image:
                  type: string
                  description: 'The image URL of the SubItem.'
                  example: '"https://example.com/nft123.jpg"'
                  nullable: false
                nft_identification:
                  type: integer
                  description: 'The unique identification number.'
                  example: 123
                  nullable: false
                nft_id:
                  type: integer
                  description: 'The ID of the parent Item.'
                  example: 1
                  nullable: false
                rarity:
                  type: string
                  description: 'The rarity level of the Item.'
                  example: '"Legendary"'
                  nullable: false
                tag_1:
                  type: string
                  description: 'The first tag for the Item.'
                  example: '"Fire"'
                  nullable: false
                tag_2:
                  type: string
                  description: 'The second tag for the Item.'
                  example: '"Mythical"'
                  nullable: false
                tag_3:
                  type: string
                  description: 'The third tag for the Item.'
                  example: '"Limited"'
                  nullable: false
                madfenix_ownership:
                  type: boolean
                  description: 'Whether the Item is owned by MadFenix.'
                  example: true
                  nullable: false
                user_id:
                  type: integer
                  description: 'The ID of the user who owns this Item.'
                  example: 42
                  nullable: false
                user_id_hedera:
                  type: integer
                  description: 'The ID of the user who owns this Item on Hedera.'
                  example: 42
                  nullable: false
              required:
                - name
                - nft_identification
                - nft_id
      security: []
    delete:
      summary: 'Remove the specified SubItem.'
      operationId: removeTheSpecifiedSubItem
      description: 'Delete an SubItem by ID.'
      parameters: []
      responses: {  }
      tags:
        - 'Subitems management'
      security: []
    parameters:
      -
        in: path
        name: account
        description: ''
        example: consequatur
        required: true
        schema:
          type: string
      -
        in: path
        name: id
        description: 'The ID of the nft identification.'
        example: consequatur
        required: true
        schema:
          type: string
  '/api/{account}/manager/nft-identification-download':
    get:
      summary: 'Download SubItem as CSV or JSON.'
      operationId: downloadSubItemAsCSVOrJSON
      description: 'Export the SubItem data in CSV or JSON format.'
      parameters: []
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Subitems management'
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                type:
                  type: string
                  description: 'The file format to download (csv or json).'
                  example: '"csv"'
                  nullable: false
                page:
                  type: integer
                  description: 'The page number for pagination.'
                  example: 0
                  nullable: false
                limit:
                  type: integer
                  description: 'The number of items per page (1-100).'
                  example: 10
                  nullable: false
                filter:
                  type: string
                  description: 'Filter items by name.'
                  example: '"Phoenix"'
                  nullable: false
                sorting:
                  type: string
                  description: 'Sort items by column and direction (column:direction).'
                  example: '"created_at:desc"'
                  nullable: false
                parent_id:
                  type: integer
                  description: 'Filter items by parent Item ID.'
                  example: 1
                  nullable: false
      security: []
    parameters:
      -
        in: path
        name: account
        description: ''
        example: consequatur
        required: true
        schema:
          type: string
  '/api/{account}/manager/nft-identification-fields':
    get:
      summary: 'List the fields of the SubItem model.'
      operationId: listTheFieldsOfTheSubItemModel
      description: 'Get the structure and field types of the SubItem model.'
      parameters: []
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Subitems management'
      security: []
    parameters:
      -
        in: path
        name: account
        description: ''
        example: consequatur
        required: true
        schema:
          type: string
  '/api/{account}/manager/nft-identification-upload':
    post:
      summary: 'Upload a CSV file for bulk SubItem processing.'
      operationId: uploadACSVFileForBulkSubItemProcessing
      description: 'Upload a CSV file to create multiple SubItem at once.'
      parameters: []
      responses: {  }
      tags:
        - 'Subitems management'
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
                  description: 'The CSV file to upload (max 1MB). Must be a CSV file.'
                  nullable: false
                header_mapping:
                  type: array
                  description: 'Array of headers mapping to SubItem fields.'
                  example:
                    - consequatur
                  items:
                    type: string
              required:
                - file
                - header_mapping
      security: []
    get:
      summary: 'Get the status of a bulk SubItem upload.'
      operationId: getTheStatusOfABulkSubItemUpload
      description: 'Check the progress of a previously submitted bulk upload.'
      parameters: []
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Subitems management'
      security: []
    parameters:
      -
        in: path
        name: account
        description: ''
        example: consequatur
        required: true
        schema:
          type: string
  '/api/{account}/manager/nft-identification-upload/{id}':
    delete:
      summary: 'Delete a bulk SubItem upload.'
      operationId: deleteABulkSubItemUpload
      description: 'Remove a pending or processing bulk upload.'
      parameters: []
      responses: {  }
      tags:
        - 'Subitems management'
      security: []
    parameters:
      -
        in: path
        name: account
        description: ''
        example: consequatur
        required: true
        schema:
          type: string
      -
        in: path
        name: id
        description: 'The ID of the nft identification upload.'
        example: consequatur
        required: true
        schema:
          type: string
  '/api/{account}/twitch/connectAccount':
    get:
      summary: ''
      operationId: getApiAccountTwitchConnectAccount
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: string
                example: 'Perfil del usuario no encontrado.'
      tags:
        - 'Twitch management'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                code:
                  type: string
                  description: ''
                  example: consequatur
                  nullable: false
                scope:
                  type: string
                  description: ''
                  example: consequatur
                  nullable: false
                state:
                  type: string
                  description: ''
                  example: consequatur
                  nullable: false
              required:
                - code
                - scope
                - state
      security: []
    parameters:
      -
        in: path
        name: account
        description: ''
        example: consequatur
        required: true
        schema:
          type: string
  '/api/{account}/twitch/disconnectTwitch':
    post:
      summary: ''
      operationId: postApiAccountTwitchDisconnectTwitch
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Twitch management'
      security: []
    parameters:
      -
        in: path
        name: account
        description: ''
        example: consequatur
        required: true
        schema:
          type: string
  '/api/{account}/login':
    post:
      summary: ''
      operationId: postApiAccountLogin
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'User management'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  description: 'Must be a valid email address.'
                  example: qkunze@example.com
                  nullable: false
                password:
                  type: string
                  description: ''
                  example: consequatur
                  nullable: false
                device_name:
                  type: string
                  description: ''
                  example: consequatur
                  nullable: false
              required:
                - email
                - password
                - device_name
      security: []
    parameters:
      -
        in: path
        name: account
        description: ''
        example: consequatur
        required: true
        schema:
          type: string
  '/api/{account}/verify2fa':
    post:
      summary: 'Verify 2FA code during login'
      operationId: verify2FACodeDuringLogin
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'User management'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  description: 'Must be a valid email address.'
                  example: qkunze@example.com
                  nullable: false
                code:
                  type: string
                  description: ''
                  example: consequatur
                  nullable: false
                device_name:
                  type: string
                  description: ''
                  example: consequatur
                  nullable: false
              required:
                - email
                - code
                - device_name
      security: []
    parameters:
      -
        in: path
        name: account
        description: ''
        example: consequatur
        required: true
        schema:
          type: string
  '/api/{account}/deleteAccount':
    post:
      summary: ''
      operationId: postApiAccountDeleteAccount
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'User management'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  description: 'Must be a valid email address.'
                  example: qkunze@example.com
                  nullable: false
                password:
                  type: string
                  description: ''
                  example: consequatur
                  nullable: false
              required:
                - email
                - password
      security: []
    parameters:
      -
        in: path
        name: account
        description: ''
        example: consequatur
        required: true
        schema:
          type: string
  '/api/{account}/logout':
    post:
      summary: ''
      operationId: postApiAccountLogout
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'User management'
      security: []
    parameters:
      -
        in: path
        name: account
        description: ''
        example: consequatur
        required: true
        schema:
          type: string
  '/api/{account}/forgotReset':
    post:
      summary: ''
      operationId: postApiAccountForgotReset
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'User management'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
                  description: ''
                  example: consequatur
                  nullable: false
                email:
                  type: string
                  description: 'Must be a valid email address.'
                  example: carolyne.luettgen@example.org
                  nullable: false
                password:
                  type: string
                  description: 'Must be at least 8 characters.'
                  example: ij-e/dl4m
                  nullable: false
              required:
                - token
                - email
                - password
      security: []
    parameters:
      -
        in: path
        name: account
        description: ''
        example: consequatur
        required: true
        schema:
          type: string
  '/api/{account}/forgotSendResetLinkEmail':
    post:
      summary: ''
      operationId: postApiAccountForgotSendResetLinkEmail
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'User management'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  description: 'Must be a valid email address.'
                  example: qkunze@example.com
                  nullable: false
              required:
                - email
      security: []
    parameters:
      -
        in: path
        name: account
        description: ''
        example: consequatur
        required: true
        schema:
          type: string
  '/api/{account}/register':
    post:
      summary: ''
      operationId: postApiAccountRegister
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'User management'
      security: []
    parameters:
      -
        in: path
        name: account
        description: ''
        example: consequatur
        required: true
        schema:
          type: string
  '/api/{account}/verify':
    post:
      summary: ''
      operationId: postApiAccountVerify
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'User management'
      security: []
    parameters:
      -
        in: path
        name: account
        description: ''
        example: consequatur
        required: true
        schema:
          type: string
  '/api/{account}/manager/user-password-reset':
    post:
      summary: ''
      operationId: postApiAccountManagerUserPasswordReset
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'User management'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                currentPassword:
                  type: string
                  description: ''
                  example: consequatur
                  nullable: false
                password:
                  type: string
                  description: 'Must be at least 8 characters.'
                  example: '[2UZ5ij-e/dl4'
                  nullable: false
              required:
                - currentPassword
                - password
      security: []
    parameters:
      -
        in: path
        name: account
        description: ''
        example: consequatur
        required: true
        schema:
          type: string
  '/api/{account}/manager/user-generate2fa':
    get:
      summary: 'Generate 2FA secret key and QR code'
      operationId: generate2FASecretKeyAndQRCode
      description: ''
      parameters: []
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'User management'
      security: []
    parameters:
      -
        in: path
        name: account
        description: ''
        example: consequatur
        required: true
        schema:
          type: string
  '/api/{account}/manager/user-confirm2fa':
    post:
      summary: 'Confirm 2FA setup by validating a code'
      operationId: confirm2FASetupByValidatingACode
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'User management'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                code:
                  type: string
                  description: ''
                  example: consequatur
                  nullable: false
              required:
                - code
      security: []
    parameters:
      -
        in: path
        name: account
        description: ''
        example: consequatur
        required: true
        schema:
          type: string
  '/api/{account}/linkWallet':
    post:
      summary: ''
      operationId: postApiAccountLinkWallet
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'User management'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                address:
                  type: string
                  description: ''
                  example: consequatur
                  nullable: false
                signature:
                  type: string
                  description: ''
                  example: consequatur
                  nullable: false
              required:
                - address
                - signature
      security: []
    parameters:
      -
        in: path
        name: account
        description: ''
        example: consequatur
        required: true
        schema:
          type: string
  '/api/{account}/setIP':
    post:
      summary: ''
      operationId: postApiAccountSetIP
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'User management'
      security: []
    parameters:
      -
        in: path
        name: account
        description: ''
        example: consequatur
        required: true
        schema:
          type: string
  '/api/{account}/getIP':
    post:
      summary: ''
      operationId: postApiAccountGetIP
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'User management'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userAndId:
                  type: string
                  description: ''
                  example: consequatur
                  nullable: false
              required:
                - userAndId
      security: []
    parameters:
      -
        in: path
        name: account
        description: ''
        example: consequatur
        required: true
        schema:
          type: string
  '/api/{account}/manager/user':
    get:
      summary: 'Display a listing of users.'
      operationId: displayAListingOfUsers
      description: 'Get a paginated list of all users.'
      parameters: []
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'User management admin'
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                page:
                  type: integer
                  description: 'The page number for pagination.'
                  example: 0
                  nullable: false
                limit:
                  type: integer
                  description: 'The number of items per page (1-100).'
                  example: 10
                  nullable: false
                filter:
                  type: string
                  description: 'Filter users by name or email.'
                  example: '"john"'
                  nullable: false
                sorting:
                  type: string
                  description: 'Sort users by column and direction (column:direction).'
                  example: '"created_at:desc"'
                  nullable: false
      security: []
    parameters:
      -
        in: path
        name: account
        description: ''
        example: consequatur
        required: true
        schema:
          type: string
  '/api/{account}/manager/user/{id}':
    get:
      summary: 'Display the specified user.'
      operationId: displayTheSpecifiedUser
      description: 'Get details of a specific user by ID.'
      parameters: []
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'User management admin'
      security: []
    put:
      summary: 'Update the specified user.'
      operationId: updateTheSpecifiedUser
      description: 'Update an existing user with the provided data.'
      parameters: []
      responses: {  }
      tags:
        - 'User management admin'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: 'The name of the user.'
                  example: '"John Doe"'
                  nullable: false
                email:
                  type: string
                  description: 'The email address of the user.'
                  example: '"john@example.com"'
                  nullable: false
                newsletter:
                  type: boolean
                  description: 'Whether the user wants to receive the newsletter.'
                  example: true
                  nullable: false
                eth_wallet:
                  type: string
                  description: 'The Ethereum wallet address of the user.'
                  example: '"0x1234567890abcdef"'
                  nullable: false
                ip:
                  type: string
                  description: 'The IP address of the user.'
                  example: '"192.168.1.1"'
                  nullable: false
                two_factor_pre_enabled:
                  type: boolean
                  description: 'Whether two-factor authentication is pre-enabled.'
                  example: false
                  nullable: false
                two_factor_enabled:
                  type: boolean
                  description: 'Whether two-factor authentication is enabled.'
                  example: false
                  nullable: false
                two_factor_secret:
                  type: string
                  description: 'The two-factor authentication secret.'
                  example: '"ABCDEFGHIJKLMNOP"'
                  nullable: false
              required:
                - name
                - email
      security: []
    parameters:
      -
        in: path
        name: account
        description: ''
        example: consequatur
        required: true
        schema:
          type: string
      -
        in: path
        name: id
        description: 'The ID of the user.'
        example: consequatur
        required: true
        schema:
          type: string
  '/api/{account}/manager/user-download':
    get:
      summary: 'Download users as CSV or JSON.'
      operationId: downloadUsersAsCSVOrJSON
      description: 'Export the user data in CSV or JSON format.'
      parameters: []
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'User management admin'
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                type:
                  type: string
                  description: 'The file format to download (csv or json).'
                  example: '"csv"'
                  nullable: false
                page:
                  type: integer
                  description: 'The page number for pagination.'
                  example: 0
                  nullable: false
                limit:
                  type: integer
                  description: 'The number of items per page (1-100).'
                  example: 10
                  nullable: false
                filter:
                  type: string
                  description: 'Filter users by name or email.'
                  example: '"john"'
                  nullable: false
                sorting:
                  type: string
                  description: 'Sort users by column and direction (column:direction).'
                  example: '"created_at:desc"'
                  nullable: false
      security: []
    parameters:
      -
        in: path
        name: account
        description: ''
        example: consequatur
        required: true
        schema:
          type: string
